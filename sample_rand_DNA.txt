
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.66 (6996) x86_64-apple-darwin13.4.0]

[Workspace restored from /Users/Daniel-Li/.RData]
[History restored from /Users/Daniel-Li/.Rapp.history]

> opstr <- generate_string(1000)
Error: could not find function "generate_string"
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
Error: could not find function "create_cuts"
> transcripts <- create_transcripts(chopped_up, length=10)
Error: could not find function "create_transcripts"
> 
> generate_string <- function(
+ 	length = NULL) {
+ 
+ 	randomString <- c()
+ 	for (i in 1:length) {
+ 		appchar <- sample(c("A", "T", "C", "G"), 1, replace=FALSE)
+ 		randomString <- paste(randomString, appchar, sep = "")
+ 	}
+ 	randomString
+ }
> 
> #randomly cut up string
> #put into dataframe
> #random generate index number 1-cuts
> #piece back strings together
> create_cuts <- function(
+ 	operating_str = NULL,
+ 	filterby = NULL,
+ 	filter = FALSE,
+ 	cuts = NULL) {
+ 
+ 	if (is.null(cuts)) {
+ 		cuts <- 1000
+ 	}
+ 	if (is.null(operating_str)) {
+ 		operating_str <- generate_string(300000)
+ 	}
+ 	if (is.null(filterby)) {
+ 		filterby <- 100
+ 	}
+ 	i <- 1;
+ 	cuts_vector <- c()
+ 	while (operating_str != "" && i <= cuts) {
+ 		start <- as.integer(sample(0:(nchar(operating_str)/(cuts * i)), 1) + 1)
+ 		end <- as.integer(sample((10:20) * start, 1))
+ 		cut <- substr(operating_str, start, end)
+ 		cuts_vector <- c(cuts_vector, cut)
+ 		operating_str <- gsub(cut, "", operating_str)
+ 		i <- i + 1
+ 	}
+ 	#filter 
+ 	if (filter) {
+ 		actual_cuts <- mapply(function(x) { if (nchar(x) >= filterby) return (TRUE) else return (FALSE) }, cuts_vector)
+ 		cuts_vector <- cuts_vector[actual_cuts == TRUE]
+ 	}
+ 	cuts_df <- data.frame(cuts = cuts_vector, stringsAsFactors = FALSE)
+ 	cuts_df
+ }
> 
> #return a dataframe of transcripts
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		for (i in 1:length_loop) {
+ 			rand <- as.integer(sample((1:end_sample), 1))
+ 			individual_transcript <- paste(individual_transcript, (chop_df[rand,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 10
[1] 9
[1] 12
[1] 19
> 
> 
> 
> 
> transcripts
transcripts
|AGCGCTTCTAC|C|C|GGGGCACGGGAT|GGGGCACGGGAT|ACGAGATCCTGTGTGGGC|ACGAGATCCTGTGTGGGC|AGCGCTTCTAC|AGCGCTTCTAC|GGGGCACGGGAT|
|AGCGCTTCTAC|C|GGGGCACGGGAT|ACGAGATCCTGTGTGGGC|GGGGCACGGGAT|AGCGCTTCTAC|ACGAGATCCTGTGTGGGC|ACGAGATCCTGTGTGGGC|AGCGCTTCTAC|
3 |ACGAGATCCTGTGTGGGC|C|GGGGCACGGGAT|CAGCATAACGGAAGAGCGGAGGGACATGAGCATGTCACCACGACCAACACTATTGGGGAAGTTCCGGCTCGTGGTTTGATCGGGTTACAATGCTAACCGACATCCAGGACTAACGGGACTCGCGGCTTCGACGCGGGGACGCGCATTAGTAAGGGTAACCCAGCACTTCCATCCCTCTTAATCCGTGCATATACTGCGGTCCGCCAAACAGGGTGCTCAGCTTCACCTAGACCATCAAACGTCGCTCGCCTAATCCGGCACTATAGCCAGCGGCAGGTTTGTCTATAGTATGGTCGTAAATGTTTAAGCGAAGCCTCGTGAATTTTTAAGAGACCGATTAATCCTGAACGGAAAGAATAGCCGTACTCTTTTATCTTAGCTCTAGCAAGTGGCACGAGGCCGGAACATTTGGTAACGGGCCTGTGAAGCATCTAGCTAGATATGAGCCTAAACCCGCGAGCTTTAATATATTCTTAGAATGATAGCGTGAACCATGAGTCTCTGGGGGATCGTGATAAGCACTCCAAGCCTGATTAGTGAAATGTTGGGGTCCATGATCGTTCAACTGTGTTGCCTTCTTTCAGGGTCATGACAAGGATCTGTGCTGGGAGCACAGGATTTGTGTGGGAGCGTGCAGATGTCGGCTCAGCGCCTTGCATCACATGCATCAGGGGAGTGTGCTGTGTCGCATAGACGAGAGGGGTCAGACGGGTAGCGTCCTGGTGTATGTGTATCTGTTCGAGGGACGCATACGCTGAATAACAGCTCTGCCGCGCGCTCCCATCCCTGTCATCTCTCAAAGACTCTAAAACCCAGTAATATGCGCCCTACATGAACCACTCGGCAAACTATTATTAGTTCAAAGAGCTAGATCTTCCCACAGCTACCGATCTACGAAGGGGGTAGTCGCATAAGTGGAGTGAGGCGGGACCAAAAATTC|CAGCATAACGGAAGAGCGGAGGGACATGAGCATGTCACCACGACCAACACTATTGGGGAAGTTCCGGCTCGTGGTTTGATCGGGTTACAATGCTAACCGACATCCAGGACTAACGGGACTCGCGGCTTCGACGCGGGGACGCGCATTAGTAAGGGTAACCCAGCACTTCCATCCCTCTTAATCCGTGCATATACTGCGGTCCGCCAAACAGGGTGCTCAGCTTCACCTAGACCATCAAACGTCGCTCGCCTAATCCGGCACTATAGCCAGCGGCAGGTTTGTCTATAGTATGGTCGTAAATGTTTAAGCGAAGCCTCGTGAATTTTTAAGAGACCGATTAATCCTGAACGGAAAGAATAGCCGTACTCTTTTATCTTAGCTCTAGCAAGTGGCACGAGGCCGGAACATTTGGTAACGGGCCTGTGAAGCATCTAGCTAGATATGAGCCTAAACCCGCGAGCTTTAATATATTCTTAGAATGATAGCGTGAACCATGAGTCTCTGGGGGATCGTGATAAGCACTCCAAGCCTGATTAGTGAAATGTTGGGGTCCATGATCGTTCAACTGTGTTGCCTTCTTTCAGGGTCATGACAAGGATCTGTGCTGGGAGCACAGGATTTGTGTGGGAGCGTGCAGATGTCGGCTCAGCGCCTTGCATCACATGCATCAGGGGAGTGTGCTGTGTCGCATAGACGAGAGGGGTCAGACGGGTAGCGTCCTGGTGTATGTGTATCTGTTCGAGGGACGCATACGCTGAATAACAGCTCTGCCGCGCGCTCCCATCCCTGTCATCTCTCAAAGACTCTAAAACCCAGTAATATGCGCCCTACATGAACCACTCGGCAAACTATTATTAGTTCAAAGAGCTAGATCTTCCCACAGCTACCGATCTACGAAGGGGGTAGTCGCATAAGTGGAGTGAGGCGGGACCAAAAATTC|ATACCTATGAGGTTGGTG|AGCGCTTCTAC|CAGCATAACGGAAGAGCGGAGGGACATGAGCATGTCACCACGACCAACACTATTGGGGAAGTTCCGGCTCGTGGTTTGATCGGGTTACAATGCTAACCGACATCCAGGACTAACGGGACTCGCGGCTTCGACGCGGGGACGCGCATTAGTAAGGGTAACCCAGCACTTCCATCCCTCTTAATCCGTGCATATACTGCGGTCCGCCAAACAGGGTGCTCAGCTTCACCTAGACCATCAAACGTCGCTCGCCTAATCCGGCACTATAGCCAGCGGCAGGTTTGTCTATAGTATGGTCGTAAATGTTTAAGCGAAGCCTCGTGAATTTTTAAGAGACCGATTAATCCTGAACGGAAAGAATAGCCGTACTCTTTTATCTTAGCTCTAGCAAGTGGCACGAGGCCGGAACATTTGGTAACGGGCCTGTGAAGCATCTAGCTAGATATGAGCCTAAACCCGCGAGCTTTAATATATTCTTAGAATGATAGCGTGAACCATGAGTCTCTGGGGGATCGTGATAAGCACTCCAAGCCTGATTAGTGAAATGTTGGGGTCCATGATCGTTCAACTGTGTTGCCTTCTTTCAGGGTCATGACAAGGATCTGTGCTGGGAGCACAGGATTTGTGTGGGAGCGTGCAGATGTCGGCTCAGCGCCTTGCATCACATGCATCAGGGGAGTGTGCTGTGTCGCATAGACGAGAGGGGTCAGACGGGTAGCGTCCTGGTGTATGTGTATCTGTTCGAGGGACGCATACGCTGAATAACAGCTCTGCCGCGCGCTCCCATCCCTGTCATCTCTCAAAGACTCTAAAACCCAGTAATATGCGCCCTACATGAACCACTCGGCAAACTATTATTAGTTCAAAGAGCTAGATCTTCCCACAGCTACCGATCTACGAAGGGGGTAGTCGCATAAGTGGAGTGAGGCGGGACCAAAAATTC|AGCGCTTCTAC|GGGGCACGGGAT|C|ACGAGATCCTGTGTGGGC|
|ATACCTATGAGGTTGGTG|CAGCATAACGGAAGAGCGGAGGGACATGAGCATGTCACCACGACCAACACTATTGGGGAAGTTCCGGCTCGTGGTTTGATCGGGTTACAATGCTAACCGACATCCAGGACTAACGGGACTCGCGGCTTCGACGCGGGGACGCGCATTAGTAAGGGTAACCCAGCACTTCCATCCCTCTTAATCCGTGCATATACTGCGGTCCGCCAAACAGGGTGCTCAGCTTCACCTAGACCATCAAACGTCGCTCGCCTAATCCGGCACTATAGCCAGCGGCAGGTTTGTCTATAGTATGGTCGTAAATGTTTAAGCGAAGCCTCGTGAATTTTTAAGAGACCGATTAATCCTGAACGGAAAGAATAGCCGTACTCTTTTATCTTAGCTCTAGCAAGTGGCACGAGGCCGGAACATTTGGTAACGGGCCTGTGAAGCATCTAGCTAGATATGAGCCTAAACCCGCGAGCTTTAATATATTCTTAGAATGATAGCGTGAACCATGAGTCTCTGGGGGATCGTGATAAGCACTCCAAGCCTGATTAGTGAAATGTTGGGGTCCATGATCGTTCAACTGTGTTGCCTTCTTTCAGGGTCATGACAAGGATCTGTGCTGGGAGCACAGGATTTGTGTGGGAGCGTGCAGATGTCGGCTCAGCGCCTTGCATCACATGCATCAGGGGAGTGTGCTGTGTCGCATAGACGAGAGGGGTCAGACGGGTAGCGTCCTGGTGTATGTGTATCTGTTCGAGGGACGCATACGCTGAATAACAGCTCTGCCGCGCGCTCCCATCCCTGTCATCTCTCAAAGACTCTAAAACCCAGTAATATGCGCCCTACATGAACCACTCGGCAAACTATTATTAGTTCAAAGAGCTAGATCTTCCCACAGCTACCGATCTACGAAGGGGGTAGTCGCATAAGTGGAGTGAGGCGGGACCAAAAATTC|ATACCTATGAGGTTGGTG|AGCGCTTCTAC|C|C|C|ACGAGATCCTGTGTGGGC|AGCGCTTCTAC|CAGCATAACGGAAGAGCGGAGGGACATGAGCATGTCACCACGACCAACACTATTGGGGAAGTTCCGGCTCGTGGTTTGATCGGGTTACAATGCTAACCGACATCCAGGACTAACGGGACTCGCGGCTTCGACGCGGGGACGCGCATTAGTAAGGGTAACCCAGCACTTCCATCCCTCTTAATCCGTGCATATACTGCGGTCCGCCAAACAGGGTGCTCAGCTTCACCTAGACCATCAAACGTCGCTCGCCTAATCCGGCACTATAGCCAGCGGCAGGTTTGTCTATAGTATGGTCGTAAATGTTTAAGCGAAGCCTCGTGAATTTTTAAGAGACCGATTAATCCTGAACGGAAAGAATAGCCGTACTCTTTTATCTTAGCTCTAGCAAGTGGCACGAGGCCGGAACATTTGGTAACGGGCCTGTGAAGCATCTAGCTAGATATGAGCCTAAACCCGCGAGCTTTAATATATTCTTAGAATGATAGCGTGAACCATGAGTCTCTGGGGGATCGTGATAAGCACTCCAAGCCTGATTAGTGAAATGTTGGGGTCCATGATCGTTCAACTGTGTTGCCTTCTTTCAGGGTCATGACAAGGATCTGTGCTGGGAGCACAGGATTTGTGTGGGAGCGTGCAGATGTCGGCTCAGCGCCTTGCATCACATGCATCAGGGGAGTGTGCTGTGTCGCATAGACGAGAGGGGTCAGACGGGTAGCGTCCTGGTGTATGTGTATCTGTTCGAGGGACGCATACGCTGAATAACAGCTCTGCCGCGCGCTCCCATCCCTGTCATCTCTCAAAGACTCTAAAACCCAGTAATATGCGCCCTACATGAACCACTCGGCAAACTATTATTAGTTCAAAGAGCTAGATCTTCCCACAGCTACCGATCTACGAAGGGGGTAGTCGCATAAGTGGAGTGAGGCGGGACCAAAAATTC|C|ACGAGATCCTGTGTGGGC|C|ATACCTATGAGGTTGGTG|AGCGCTTCTAC|C|ACGAGATCCTGTGTGGGC|C|C|
> chopped_up
cuts
1 CAGCATAACGGAAGAGCGGAGGGACATGAGCATGTCACCACGACCAACACTATTGGGGAAGTTCCGGCTCGTGGTTTGATCGGGTTACAATGCTAACCGACATCCAGGACTAACGGGACTCGCGGCTTCGACGCGGGGACGCGCATTAGTAAGGGTAACCCAGCACTTCCATCCCTCTTAATCCGTGCATATACTGCGGTCCGCCAAACAGGGTGCTCAGCTTCACCTAGACCATCAAACGTCGCTCGCCTAATCCGGCACTATAGCCAGCGGCAGGTTTGTCTATAGTATGGTCGTAAATGTTTAAGCGAAGCCTCGTGAATTTTTAAGAGACCGATTAATCCTGAACGGAAAGAATAGCCGTACTCTTTTATCTTAGCTCTAGCAAGTGGCACGAGGCCGGAACATTTGGTAACGGGCCTGTGAAGCATCTAGCTAGATATGAGCCTAAACCCGCGAGCTTTAATATATTCTTAGAATGATAGCGTGAACCATGAGTCTCTGGGGGATCGTGATAAGCACTCCAAGCCTGATTAGTGAAATGTTGGGGTCCATGATCGTTCAACTGTGTTGCCTTCTTTCAGGGTCATGACAAGGATCTGTGCTGGGAGCACAGGATTTGTGTGGGAGCGTGCAGATGTCGGCTCAGCGCCTTGCATCACATGCATCAGGGGAGTGTGCTGTGTCGCATAGACGAGAGGGGTCAGACGGGTAGCGTCCTGGTGTATGTGTATCTGTTCGAGGGACGCATACGCTGAATAACAGCTCTGCCGCGCGCTCCCATCCCTGTCATCTCTCAAAGACTCTAAAACCCAGTAATATGCGCCCTACATGAACCACTCGGCAAACTATTATTAGTTCAAAGAGCTAGATCTTCCCACAGCTACCGATCTACGAAGGGGGTAGTCGCATAAGTGGAGTGAGGCGGGACCAAAAATTC





> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 11
[1] 8
[1] 19
[1] 11
> 
> 
> chopped_up
                                                                                                                                                                                                cuts
1                                      TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA
2                                                                                                                                                                                        TGCGGAATATA
3                                                                             TATGGACCGTAGAACAAATATGAAGCTGATAGAATGGGAGTCCGCCAGAGGTGTAGGCTACGCAGATATAAGGACTTTCTCCCGAAGAGAAACTGGAAAACGGTGGAAAGGGCAACTA
4  TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT
5                                                                                                                                                                                        CACCTGTTACC
6                                                                                                                                                  AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC
7                                                                                                                                               GTGGAGGGCTAGTGGCAAAGGCAAGGCGTGTGGTAGGCAAACCTTGTGAACT
8                                                                                                                                                                                        GCGTTGGGTTT
9                                                                                                                                                        CGAACATGGCAGGTCTAAGGGGATTTGGTGTGCTTTAACGATT
10                                                                                                                                                                               TATCTCGTTACGAACATGG
11                                                                                                                                                          AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT
12                                                                                                                                                                                    GAACTTCAGAGGAG
13                                                                                                                                                                           GGGACACGCCCCAAGACGAAACT
14                                                                                                                                                                                   GCGTTTTTATAATCG
15                                                                                                                                                                                  GTGTGGCCTCACGCCG
> transcripts
transcripts
1                                                                                                                                                                                                                                                               |TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT|AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC|TGCGGAATATA|TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA|CACCTGTTACC|TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT|GGGACACGCCCCAAGACGAAACT|TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA|AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT|AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT|GAACTTCAGAGGAG|
|GTGGAGGGCTAGTGGCAAAGGCAAGGCGTGTGGTAGGCAAACCTTGTGAACT|AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT|GCGTTGGGTTT|TGCGGAATATA|TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT|TGCGGAATATA|GTGGAGGGCTAGTGGCAAAGGCAAGGCGTGTGGTAGGCAAACCTTGTGAACT|TATGGACCGTAGAACAAATATGAAGCTGATAGAATGGGAGTCCGCCAGAGGTGTAGGCTACGCAGATATAAGGACTTTCTCCCGAAGAGAAACTGGAAAACGGTGGAAAGGGCAACTA|
3 |GCGTTGGGTTT|TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA|AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT|GCGTTGGGTTT|GTGGAGGGCTAGTGGCAAAGGCAAGGCGTGTGGTAGGCAAACCTTGTGAACT|AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC|AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC|AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT|CACCTGTTACC|GTGGAGGGCTAGTGGCAAAGGCAAGGCGTGTGGTAGGCAAACCTTGTGAACT|GGGACACGCCCCAAGACGAAACT|TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT|TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA|AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC|TATCTCGTTACGAACATGG|AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC|GAACTTCAGAGGAG|TATGGACCGTAGAACAAATATGAAGCTGATAGAATGGGAGTCCGCCAGAGGTGTAGGCTACGCAGATATAAGGACTTTCTCCCGAAGAGAAACTGGAAAACGGTGGAAAGGGCAACTA|AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT|
4                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |GCGTTTTTATAATCG|AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT|GTGTGGCCTCACGCCG|TATGGACCGTAGAACAAATATGAAGCTGATAGAATGGGAGTCCGCCAGAGGTGTAGGCTACGCAGATATAAGGACTTTCTCCCGAAGAGAAACTGGAAAACGGTGGAAAGGGCAACTA|TATGGACCGTAGAACAAATATGAAGCTGATAGAATGGGAGTCCGCCAGAGGTGTAGGCTACGCAGATATAAGGACTTTCTCCCGAAGAGAAACTGGAAAACGGTGGAAAGGGCAACTA|GTGGAGGGCTAGTGGCAAAGGCAAGGCGTGTGGTAGGCAAACCTTGTGAACT|TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT|AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC|GCGTTTTTATAATCG|GGGACACGCCCCAAGACGAAACT|GGGACACGCCCCAAGACGAAACT|
> transcript <- strsplit(transcripts[1,],"")[[1]]
> transcript
  [1] "|" "T" "G" "A" "C" "A" "A" "T" "G" "A" "T" "G" "A" "G"
 [15] "C" "T" "A" "C" "C" "A" "T" "T" "G" "A" "C" "G" "C" "G"
 [29] "C" "C" "C" "T" "A" "C" "T" "C" "A" "C" "A" "T" "A" "C"
 [43] "A" "T" "T" "T" "T" "C" "T" "C" "C" "T" "T" "A" "A" "A"
 [57] "G" "G" "T" "G" "G" "T" "C" "T" "G" "A" "G" "T" "A" "C"
 [71] "C" "C" "T" "A" "G" "A" "G" "T" "T" "T" "C" "C" "G" "A"
 [85] "C" "T" "A" "A" "A" "A" "G" "C" "T" "A" "A" "C" "A" "C"
 [99] "C" "G" "A" "C" "A" "A" "T" "C" "T" "A" "C" "C" "T" "T"
[113] "C" "A" "G" "A" "C" "C" "C" "G" "T" "C" "G" "A" "G" "G"
[127] "G" "C" "T" "C" "G" "A" "A" "A" "G" "C" "C" "C" "C" "A"
[141] "A" "C" "T" "A" "A" "T" "T" "C" "T" "G" "T" "G" "A" "C"
[155] "T" "G" "A" "A" "A" "T" "A" "A" "C" "A" "T" "G" "C" "G"
[169] "A" "G" "G" "A" "T" "G" "C" "G" "T" "T" "A" "T" "T" "T"
[183] "G" "G" "T" "T" "A" "C" "T" "T" "C" "A" "T" "T" "|" "A"
[197] "G" "G" "A" "T" "A" "T" "T" "T" "G" "G" "T" "C" "T" "G"
[211] "C" "T" "A" "T" "A" "G" "C" "T" "G" "A" "G" "C" "C" "C"
[225] "A" "T" "T" "C" "T" "T" "G" "A" "G" "G" "T" "C" "A" "T"
[239] "T" "T" "A" "C" "A" "C" "|" "T" "G" "C" "G" "G" "A" "A"
[253] "T" "A" "T" "A" "|" "T" "C" "C" "C" "A" "C" "A" "A" "T"
[267] "G" "T" "C" "T" "C" "T" "T" "C" "C" "C" "T" "C" "A" "A"
[281] "T" "G" "G" "A" "A" "C" "A" "A" "A" "C" "G" "C" "G" "G"
[295] "A" "T" "C" "C" "T" "A" "A" "A" "C" "C" "G" "A" "C" "G"
[309] "T" "A" "C" "G" "T" "C" "T" "A" "A" "T" "T" "C" "G" "A"
[323] "G" "C" "T" "C" "C" "G" "T" "C" "C" "G" "C" "G" "A" "G"
[337] "T" "C" "T" "T" "A" "T" "G" "A" "A" "G" "C" "T" "C" "T"
[351] "C" "G" "C" "T" "T" "A" "T" "A" "G" "G" "A" "C" "T" "A"
[365] "A" "G" "G" "G" "T" "A" "G" "A" "T" "C" "C" "G" "C" "G"
[379] "T" "C" "A" "T" "C" "A" "A" "A" "C" "C" "C" "C" "C" "G"
[393] "T" "G" "C" "T" "C" "A" "A" "T" "T" "C" "G" "C" "T" "T"
[407] "T" "G" "T" "T" "G" "T" "T" "A" "|" "C" "A" "C" "C" "T"
[421] "G" "T" "T" "A" "C" "C" "|" "T" "G" "A" "C" "A" "A" "T"
[435] "G" "A" "T" "G" "A" "G" "C" "T" "A" "C" "C" "A" "T" "T"
[449] "G" "A" "C" "G" "C" "G" "C" "C" "C" "T" "A" "C" "T" "C"
[463] "A" "C" "A" "T" "A" "C" "A" "T" "T" "T" "T" "C" "T" "C"
[477] "C" "T" "T" "A" "A" "A" "G" "G" "T" "G" "G" "T" "C" "T"
[491] "G" "A" "G" "T" "A" "C" "C" "C" "T" "A" "G" "A" "G" "T"
[505] "T" "T" "C" "C" "G" "A" "C" "T" "A" "A" "A" "A" "G" "C"
[519] "T" "A" "A" "C" "A" "C" "C" "G" "A" "C" "A" "A" "T" "C"
[533] "T" "A" "C" "C" "T" "T" "C" "A" "G" "A" "C" "C" "C" "G"
[547] "T" "C" "G" "A" "G" "G" "G" "C" "T" "C" "G" "A" "A" "A"
[561] "G" "C" "C" "C" "C" "A" "A" "C" "T" "A" "A" "T" "T" "C"
[575] "T" "G" "T" "G" "A" "C" "T" "G" "A" "A" "A" "T" "A" "A"
[589] "C" "A" "T" "G" "C" "G" "A" "G" "G" "A" "T" "G" "C" "G"
[603] "T" "T" "A" "T" "T" "T" "G" "G" "T" "T" "A" "C" "T" "T"
[617] "C" "A" "T" "T" "|" "G" "G" "G" "A" "C" "A" "C" "G" "C"
[631] "C" "C" "C" "A" "A" "G" "A" "C" "G" "A" "A" "A" "C" "T"
[645] "|" "T" "C" "C" "C" "A" "C" "A" "A" "T" "G" "T" "C" "T"
[659] "C" "T" "T" "C" "C" "C" "T" "C" "A" "A" "T" "G" "G" "A"
[673] "A" "C" "A" "A" "A" "C" "G" "C" "G" "G" "A" "T" "C" "C"
[687] "T" "A" "A" "A" "C" "C" "G" "A" "C" "G" "T" "A" "C" "G"
[701] "T" "C" "T" "A" "A" "T" "T" "C" "G" "A" "G" "C" "T" "C"
[715] "C" "G" "T" "C" "C" "G" "C" "G" "A" "G" "T" "C" "T" "T"
[729] "A" "T" "G" "A" "A" "G" "C" "T" "C" "T" "C" "G" "C" "T"
[743] "T" "A" "T" "A" "G" "G" "A" "C" "T" "A" "A" "G" "G" "G"
[757] "T" "A" "G" "A" "T" "C" "C" "G" "C" "G" "T" "C" "A" "T"
[771] "C" "A" "A" "A" "C" "C" "C" "C" "C" "G" "T" "G" "C" "T"
[785] "C" "A" "A" "T" "T" "C" "G" "C" "T" "T" "T" "G" "T" "T"
[799] "G" "T" "T" "A" "|" "A" "G" "T" "T" "G" "C" "G" "A" "C"
[813] "A" "A" "C" "C" "T" "G" "T" "G" "C" "T" "C" "G" "C" "C"
[827] "A" "T" "A" "A" "G" "T" "C" "G" "A" "C" "C" "T" "G" "A"
[841] "G" "A" "T" "|" "A" "G" "T" "T" "G" "C" "G" "A" "C" "A"
[855] "A" "C" "C" "T" "G" "T" "G" "C" "T" "C" "G" "C" "C" "A"
[869] "T" "A" "A" "G" "T" "C" "G" "A" "C" "C" "T" "G" "A" "G"
[883] "A" "T" "|" "G" "A" "A" "C" "T" "T" "C" "A" "G" "A" "G"
[897] "G" "A" "G" "|"
> eq_classes <- c()
> 		eq_string <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> eq_classes
 [1] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
 [2] "AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC"                                                                                                                                                
 [3] "TGCGGAATATA"                                                                                                                                                                                      
 [4] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
 [5] "CACCTGTTACC"                                                                                                                                                                                      
 [6] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
 [7] "GGGACACGCCCCAAGACGAAACT"                                                                                                                                                                          
 [8] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
 [9] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[10] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[11] "GAACTTCAGAGGAG"                                                                                                                                                                                   
> eq_stirng
Error: object 'eq_stirng' not found
> eq_string
NULL
> 		plot_df <- data.frame(eq=eq_classes)
> 
> plot_df
                                                                                                                                                                                                  eq
1  TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT
2                                                                                                                                                  AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC
3                                                                                                                                                                                        TGCGGAATATA
4                                      TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA
5                                                                                                                                                                                        CACCTGTTACC
6  TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT
7                                                                                                                                                                            GGGACACGCCCCAAGACGAAACT
8                                      TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA
9                                                                                                                                                           AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT
10                                                                                                                                                          AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT
11                                                                                                                                                                                    GAACTTCAGAGGAG
> plot_df
                                                                                                                                                                                                  eq
1  TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT
2                                                                                                                                                  AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC
3                                                                                                                                                                                        TGCGGAATATA
4                                      TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA
5                                                                                                                                                                                        CACCTGTTACC
6  TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT
7                                                                                                                                                                            GGGACACGCCCCAAGACGAAACT
8                                      TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA
9                                                                                                                                                           AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT
10                                                                                                                                                          AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT
11                                                                                                                                                                                    GAACTTCAGAGGAG
> for (i in 1:nrow(plot_df)) { print(plot_df[i,])}
[1] TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] TGCGGAATATA
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] CACCTGTTACC
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] GGGACACGCCCCAAGACGAAACT
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
[1] GAACTTCAGAGGAG
8 Levels: AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC ...
> plot_df <- data.frame(eq=eq_classes, stringsAsFactors=FALSE)
> for (i in 1:nrow(plot_df)) { print(plot_df[i,])}
[1] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
[1] "AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC"
[1] "TGCGGAATATA"
[1] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"
[1] "CACCTGTTACC"
[1] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
[1] "GGGACACGCCCCAAGACGAAACT"
[1] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"
[1] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"
[1] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"
[1] "GAACTTCAGAGGAG"
>  rexp(10,1/30)
 [1]  14.616861   5.293771  17.890808 103.105428  28.255005
 [6]  23.741967   7.854392  11.460257  54.654165  18.881672
> rexp(10,1/30)
 [1] 119.448909  10.979660  39.224146  37.271803   4.782770
 [6]   6.822633  66.916740  46.483733  37.564188  10.431531
> rexp(10,1/30)
 [1] 76.4616665  1.6583146  0.1682437 13.3890568  9.8685188
 [6] 20.1842910 34.1330658  3.6841365 21.9256653 88.7479375
> pexp(2, rate=1/3) 
[1] 0.4865829
> pexp(10, rate=1/3)
[1] 0.964326
> log(4)
[1] 1.386294
> transcript
  [1] "|" "T" "G" "A" "C" "A" "A" "T" "G" "A" "T" "G" "A" "G"
 [15] "C" "T" "A" "C" "C" "A" "T" "T" "G" "A" "C" "G" "C" "G"
 [29] "C" "C" "C" "T" "A" "C" "T" "C" "A" "C" "A" "T" "A" "C"
 [43] "A" "T" "T" "T" "T" "C" "T" "C" "C" "T" "T" "A" "A" "A"
 [57] "G" "G" "T" "G" "G" "T" "C" "T" "G" "A" "G" "T" "A" "C"
 [71] "C" "C" "T" "A" "G" "A" "G" "T" "T" "T" "C" "C" "G" "A"
 [85] "C" "T" "A" "A" "A" "A" "G" "C" "T" "A" "A" "C" "A" "C"
 [99] "C" "G" "A" "C" "A" "A" "T" "C" "T" "A" "C" "C" "T" "T"
[113] "C" "A" "G" "A" "C" "C" "C" "G" "T" "C" "G" "A" "G" "G"
[127] "G" "C" "T" "C" "G" "A" "A" "A" "G" "C" "C" "C" "C" "A"
[141] "A" "C" "T" "A" "A" "T" "T" "C" "T" "G" "T" "G" "A" "C"
[155] "T" "G" "A" "A" "A" "T" "A" "A" "C" "A" "T" "G" "C" "G"
[169] "A" "G" "G" "A" "T" "G" "C" "G" "T" "T" "A" "T" "T" "T"
[183] "G" "G" "T" "T" "A" "C" "T" "T" "C" "A" "T" "T" "|" "A"
[197] "G" "G" "A" "T" "A" "T" "T" "T" "G" "G" "T" "C" "T" "G"
[211] "C" "T" "A" "T" "A" "G" "C" "T" "G" "A" "G" "C" "C" "C"
[225] "A" "T" "T" "C" "T" "T" "G" "A" "G" "G" "T" "C" "A" "T"
[239] "T" "T" "A" "C" "A" "C" "|" "T" "G" "C" "G" "G" "A" "A"
[253] "T" "A" "T" "A" "|" "T" "C" "C" "C" "A" "C" "A" "A" "T"
[267] "G" "T" "C" "T" "C" "T" "T" "C" "C" "C" "T" "C" "A" "A"
[281] "T" "G" "G" "A" "A" "C" "A" "A" "A" "C" "G" "C" "G" "G"
[295] "A" "T" "C" "C" "T" "A" "A" "A" "C" "C" "G" "A" "C" "G"
[309] "T" "A" "C" "G" "T" "C" "T" "A" "A" "T" "T" "C" "G" "A"
[323] "G" "C" "T" "C" "C" "G" "T" "C" "C" "G" "C" "G" "A" "G"
[337] "T" "C" "T" "T" "A" "T" "G" "A" "A" "G" "C" "T" "C" "T"
[351] "C" "G" "C" "T" "T" "A" "T" "A" "G" "G" "A" "C" "T" "A"
[365] "A" "G" "G" "G" "T" "A" "G" "A" "T" "C" "C" "G" "C" "G"
[379] "T" "C" "A" "T" "C" "A" "A" "A" "C" "C" "C" "C" "C" "G"
[393] "T" "G" "C" "T" "C" "A" "A" "T" "T" "C" "G" "C" "T" "T"
[407] "T" "G" "T" "T" "G" "T" "T" "A" "|" "C" "A" "C" "C" "T"
[421] "G" "T" "T" "A" "C" "C" "|" "T" "G" "A" "C" "A" "A" "T"
[435] "G" "A" "T" "G" "A" "G" "C" "T" "A" "C" "C" "A" "T" "T"
[449] "G" "A" "C" "G" "C" "G" "C" "C" "C" "T" "A" "C" "T" "C"
[463] "A" "C" "A" "T" "A" "C" "A" "T" "T" "T" "T" "C" "T" "C"
[477] "C" "T" "T" "A" "A" "A" "G" "G" "T" "G" "G" "T" "C" "T"
[491] "G" "A" "G" "T" "A" "C" "C" "C" "T" "A" "G" "A" "G" "T"
[505] "T" "T" "C" "C" "G" "A" "C" "T" "A" "A" "A" "A" "G" "C"
[519] "T" "A" "A" "C" "A" "C" "C" "G" "A" "C" "A" "A" "T" "C"
[533] "T" "A" "C" "C" "T" "T" "C" "A" "G" "A" "C" "C" "C" "G"
[547] "T" "C" "G" "A" "G" "G" "G" "C" "T" "C" "G" "A" "A" "A"
[561] "G" "C" "C" "C" "C" "A" "A" "C" "T" "A" "A" "T" "T" "C"
[575] "T" "G" "T" "G" "A" "C" "T" "G" "A" "A" "A" "T" "A" "A"
[589] "C" "A" "T" "G" "C" "G" "A" "G" "G" "A" "T" "G" "C" "G"
[603] "T" "T" "A" "T" "T" "T" "G" "G" "T" "T" "A" "C" "T" "T"
[617] "C" "A" "T" "T" "|" "G" "G" "G" "A" "C" "A" "C" "G" "C"
[631] "C" "C" "C" "A" "A" "G" "A" "C" "G" "A" "A" "A" "C" "T"
[645] "|" "T" "C" "C" "C" "A" "C" "A" "A" "T" "G" "T" "C" "T"
[659] "C" "T" "T" "C" "C" "C" "T" "C" "A" "A" "T" "G" "G" "A"
[673] "A" "C" "A" "A" "A" "C" "G" "C" "G" "G" "A" "T" "C" "C"
[687] "T" "A" "A" "A" "C" "C" "G" "A" "C" "G" "T" "A" "C" "G"
[701] "T" "C" "T" "A" "A" "T" "T" "C" "G" "A" "G" "C" "T" "C"
[715] "C" "G" "T" "C" "C" "G" "C" "G" "A" "G" "T" "C" "T" "T"
[729] "A" "T" "G" "A" "A" "G" "C" "T" "C" "T" "C" "G" "C" "T"
[743] "T" "A" "T" "A" "G" "G" "A" "C" "T" "A" "A" "G" "G" "G"
[757] "T" "A" "G" "A" "T" "C" "C" "G" "C" "G" "T" "C" "A" "T"
[771] "C" "A" "A" "A" "C" "C" "C" "C" "C" "G" "T" "G" "C" "T"
[785] "C" "A" "A" "T" "T" "C" "G" "C" "T" "T" "T" "G" "T" "T"
[799] "G" "T" "T" "A" "|" "A" "G" "T" "T" "G" "C" "G" "A" "C"
[813] "A" "A" "C" "C" "T" "G" "T" "G" "C" "T" "C" "G" "C" "C"
[827] "A" "T" "A" "A" "G" "T" "C" "G" "A" "C" "C" "T" "G" "A"
[841] "G" "A" "T" "|" "A" "G" "T" "T" "G" "C" "G" "A" "C" "A"
[855] "A" "C" "C" "T" "G" "T" "G" "C" "T" "C" "G" "C" "C" "A"
[869] "T" "A" "A" "G" "T" "C" "G" "A" "C" "C" "T" "G" "A" "G"
[883] "A" "T" "|" "G" "A" "A" "C" "T" "T" "C" "A" "G" "A" "G"
[897] "G" "A" "G" "|"
> nchar(transcript)
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [29] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [57] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [85] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[113] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[141] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[169] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[197] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[225] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[253] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[281] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[309] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[337] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[365] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[393] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[421] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[449] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[477] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[505] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[533] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[561] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[589] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[617] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[645] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[673] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[701] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[729] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[757] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[785] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[813] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[841] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[869] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[897] 1 1 1 1
> eq_classes
 [1] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
 [2] "AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC"                                                                                                                                                
 [3] "TGCGGAATATA"                                                                                                                                                                                      
 [4] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
 [5] "CACCTGTTACC"                                                                                                                                                                                      
 [6] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
 [7] "GGGACACGCCCCAAGACGAAACT"                                                                                                                                                                          
 [8] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
 [9] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[10] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[11] "GAACTTCAGAGGAG"                                                                                                                                                                                   
> i <- 0
> for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> eq_classes
 [1] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
 [2] "AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC"                                                                                                                                                
 [3] "TGCGGAATATA"                                                                                                                                                                                      
 [4] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
 [5] "CACCTGTTACC"                                                                                                                                                                                      
 [6] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
 [7] "GGGACACGCCCCAAGACGAAACT"                                                                                                                                                                          
 [8] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
 [9] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[10] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[11] "GAACTTCAGAGGAG"                                                                                                                                                                                   
[12] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
[13] "AGGATATTTGGTCTGCTATAGCTGAGCCCATTCTTGAGGTCATTTACAC"                                                                                                                                                
[14] "TGCGGAATATA"                                                                                                                                                                                      
[15] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
[16] "CACCTGTTACC"                                                                                                                                                                                      
[17] "TGACAATGATGAGCTACCATTGACGCGCCCTACTCACATACATTTTCTCCTTAAAGGTGGTCTGAGTACCCTAGAGTTTCCGACTAAAAGCTAACACCGACAATCTACCTTCAGACCCGTCGAGGGCTCGAAAGCCCCAACTAATTCTGTGACTGAAATAACATGCGAGGATGCGTTATTTGGTTACTTCATT"
[18] "GGGACACGCCCCAAGACGAAACT"                                                                                                                                                                          
[19] "TCCCACAATGTCTCTTCCCTCAATGGAACAAACGCGGATCCTAAACCGACGTACGTCTAATTCGAGCTCCGTCCGCGAGTCTTATGAAGCTCTCGCTTATAGGACTAAGGGTAGATCCGCGTCATCAAACCCCCGTGCTCAATTCGCTTTGTTGTTA"                                    
[20] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[21] "AGTTGCGACAACCTGTGCTCGCCATAAGTCGACCTGAGAT"                                                                                                                                                         
[22] "GAACTTCAGAGGAG"                                                                                                                                                                                   
> i
[1] 888
> log(4)/(3/4 *i)
[1] 0.002081523
> log(4)/1
[1] 1.386294
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 9
[1] 10
[1] 12
[1] 9
> 
> 
> 
> t <- 1
> transcript <- strsplit(dataf[t,], "")[[1]]
Error in strsplit(dataf[t, ], "") : object 'dataf' not found
> 		eq_classes <- c()
> 		eq_string <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> transcript <- strsplit(transcripts[t,], "")[[1]]
> 		eq_classes <- c()
> 		eq_string <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> 
> eq_classes

[2] "AGCAAATATCATACGGTGAATCCGAGGATCA"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
[3] "CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT"

[5] "CCGTGATATTGCAGCCGAGCGTCTATTTAGTTGGGCGGATGCTTCGGTGAGACGAAAGTCTAATGATTACACATCCAGCCATATCATCAAAATAAACACGTAGGGTGCCGCGGGTAGTTACTAGGTCAACTCAGTCCCCAACCCGGAATGTACGCCGAAGATGGATGTATGGGAGGAGCCAGG"                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
[6] "GTAGCTCTAGTT"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
[7] "CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT"
[8] "AGCAAATATCATACGGTGAATCCGAGGATCA"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
[9] "AGCAAATATCATACGGTGAATCCGAGGATCA"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		for (i in 1:length_loop) {
+ 			rand <- as.integer(sample((1:end_sample), 1, replacement=FALSE))
+ 			individual_transcript <- paste(individual_transcript, (chop_df[rand,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 13
Error in sample((1:end_sample), 1, replacement = FALSE) : 
  unused argument (replacement = FALSE)
> 
> 
> 
> 
> 
> transcripts
transcripts
1 |AGCCACG|AGCAAATATCATACGGTGAATCCGAGGATCA|CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT|GTAGCTCTAGTT|CCGTGATATTGCAGCCGAGCGTCTATTTAGTTGGGCGGATGCTTCGGTGAGACGAAAGTCTAATGATTACACATCCAGCCATATCATCAAAATAAACACGTAGGGTGCCGCGGGTAGTTACTAGGTCAACTCAGTCCCCAACCCGGAATGTACGCCGAAGATGGATGTATGGGAGGAGCCAGG|GTAGCTCTAGTT|CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT|AGCAAATATCATACGGTGAATCCGAGGATCA|AGCAAATATCATACGGTGAATCCGAGGATCA|
|CTGGAACCACCTG|CCGTGATATTGCAGCCGAGCGTCTATTTAGTTGGGCGGATGCTTCGGTGAGACGAAAGTCTAATGATTACACATCCAGCCATATCATCAAAATAAACACGTAGGGTGCCGCGGGTAGTTACTAGGTCAACTCAGTCCCCAACCCGGAATGTACGCCGAAGATGGATGTATGGGAGGAGCCAGG|GACGTAGACCTGACGACGCATATGTAACTAACGAG|GACGTAGACCTGACGACGCATATGTAACTAACGAG|ACGGTCCTGCGGCAGGA|AGCCACG|GTGCAAGGGTACGT|AGCCACG|CGCAGAAGCAACTATACGCCTGATTTGT|AGCCACG|
|AGCAAATATCATACGGTGAATCCGAGGATCA|CCAGTTGTTGC|CCGTGATATTGCAGCCGAGCGTCTATTTAGTTGGGCGGATGCTTCGGTGAGACGAAAGTCTAATGATTACACATCCAGCCATATCATCAAAATAAACACGTAGGGTGCCGCGGGTAGTTACTAGGTCAACTCAGTCCCCAACCCGGAATGTACGCCGAAGATGGATGTATGGGAGGAGCCAGG|CGCAGAAGCAACTATACGCCTGATTTGT|GTAGCTCTAGTT|GTAGCTCTAGTT|CTGGAACCACCTG|CCGTGATATTGCAGCCGAGCGTCTATTTAGTTGGGCGGATGCTTCGGTGAGACGAAAGTCTAATGATTACACATCCAGCCATATCATCAAAATAAACACGTAGGGTGCCGCGGGTAGTTACTAGGTCAACTCAGTCCCCAACCCGGAATGTACGCCGAAGATGGATGTATGGGAGGAGCCAGG|CCAGTTGTTGC|AGCCACG|ACGGTCCTGCGGCAGGA|CCGTGATATTGCAGCCGAGCGTCTATTTAGTTGGGCGGATGCTTCGGTGAGACGAAAGTCTAATGATTACACATCCAGCCATATCATCAAAATAAACACGTAGGGTGCCGCGGGTAGTTACTAGGTCAACTCAGTCCCCAACCCGGAATGTACGCCGAAGATGGATGTATGGGAGGAGCCAGG|
4                                                                                                                                                                                                                 |GTGCAAGGGTACGT|GTAGCTCTAGTT|AGCAAATATCATACGGTGAATCCGAGGATCA|CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT|TTAGAGCCGT|TTAGAGCCGT|TTAGAGCCGT|GTAGCTCTAGTT|CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT|
> transcript <- strsplit(transcripts[t,], "")[[1]]
> 		eq_classes <- c()
> 		eq_string <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> 
> eq_classes

[2] "AGCAAATATCATACGGTGAATCCGAGGATCA"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
[3] "CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT"

[5] "CCGTGATATTGCAGCCGAGCGTCTATTTAGTTGGGCGGATGCTTCGGTGAGACGAAAGTCTAATGATTACACATCCAGCCATATCATCAAAATAAACACGTAGGGTGCCGCGGGTAGTTACTAGGTCAACTCAGTCCCCAACCCGGAATGTACGCCGAAGATGGATGTATGGGAGGAGCCAGG"                                                                                                                                                                                                                                                                                                                                                                                                                                                                        

[7] "CAGTCCACGAATGGCGGCCGCAGATGATGATTCGGACTCTTCCTAAGAGGCTCAGCGCGTCTGTTGGACCTGATCACCCACGAAGAAACCGCGGGGGTGTCATAGCATTGTAGCTTCGATGTAATTAGTGGGGTGCGCAAGAGAGAAACTGGTTCACCGACCATTTACGCGATAGTACAAAACCGTTTAGAGTTCAACTCACCAGGATATGAATGGCCAATCGCCGATTGGTATTATTGAAGTAATTAAAGAACTACTCACGCGTCAACTAGGCTTAGATTCGCGAATCGATAGAATATGTTGCAGAGCACGCCCGGAATGGTGGCAAAGGGGAGTTCTGTGCTCTACCCTACAACAGTTTCTGTGCCTACTGCGAGTTAAGGCTATAGCGAGTTAATGCTCTCTTAGACACTTATTACCCAACAAAGACCTTTAACGATAGAAAAGGACGTGCATAACAGTCAGGAGTGGGGCGAGGTAGCACTGGCGACTATCAGATCATCGCTGGGCGGCGTGACTGCGCAAGCGCTCTGCGGAACACGAGTTGTAGGCGGGATGGGGGCAAATTTCGCGATTAGACCCCCTATGATTGAACCGTAATTTTCCCAGTTTTCTGGTTCTTATTTATAGCTGTGATAT"
[8] "AGCAAATATCATACGGTGAATCCGAGGATCA"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
[9] "AGCAAATATCATACGGTGAATCCGAGGATCA"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
> #return a dataframe of transcripts
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		for (i in 1:length_loop) {
+ 			rand <- as.integer(sample((1:end_sample), 1, replace=FALSE))
+ 			individual_transcript <- paste(individual_transcript, (chop_df[rand,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> transcript <- strsplit(transcripts[t,], "")[[1]]
> 		eq_classes <- c()
> 		eq_string <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 19
[1] 11
[1] 9
[1] 13
> 
> 
> 
> 
> transcript <- strsplit(transcripts[t,], "")[[1]]
> 		eq_classes <- c()
> 		eq_string <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> eq_classes
 [1] "TCTTCCATGGTTTTTGCGATGTACAGCGTGAGCCGACAGCGGTCAGTTCATAGGGATTTTCCACAAAGCGCAGCCAGTCAGCCCAAACCTAGGGCCTAACTGCCTAAGCTACCACTATGGACGAGAGCCTAAGTTTGATCGCTGTCTTGGTTCTGATGCCACGGCATTCGAG"                                      
 [2] "CTCAATGGCTAGTGGTGAAGGCGAACTCATACGATAGAGGCAGTGGAAGCCTCCTGGTCAGAACGCCTCCTTACAATCTCCGATCAGTGTGCGGGTGGCAGGAAGCAAAAGTTGTTCCGCGGAAGATCCTAGGGTCACCCATGCATACCCACGGCTTACATCAGTCCGCATGCCAGGTAGTTGAAGGGATAGGTTGCTTCACGTCCTCGC"
 [3] "AGCGGAACTTAGAAGCTCAAGCAGAGCCCTTGAAGGGCTTATATAAGACCAGACACCTTATTAGGTCGTTTGTGTCGATACCGCAAGTCATACACGTTTCGCTATGCTAGTGATCACTGAAATTACCCAGGCACCAGACAT"                                                                     
 [4] "CCCCAACCGGCCCCGAAGAAGTTTTAACTCG"                                                                                                                                                                                   
 [5] "GTAACCTGGCACTTCATGTAGTAATACGT"                                                                                                                                                                                     
 [6] "CAGTTTTTAATGCACACTCATAGCTGCATGCGTTAGTAACAATCCATGCCCTTCCGCTGAGACACAG"                                                                                                                                               
 [7] "CTCAATGGCTAGTGGTGAAGGCGAACTCATACGATAGAGGCAGTGGAAGCCTCCTGGTCAGAACGCCTCCTTACAATCTCCGATCAGTGTGCGGGTGGCAGGAAGCAAAAGTTGTTCCGCGGAAGATCCTAGGGTCACCCATGCATACCCACGGCTTACATCAGTCCGCATGCCAGGTAGTTGAAGGGATAGGTTGCTTCACGTCCTCGC"
 [8] "CAGTTTTTAATGCACACTCATAGCTGCATGCGTTAGTAACAATCCATGCCCTTCCGCTGAGACACAG"                                                                                                                                               
 [9] "TTAACTCACTCAA"                                                                                                                                                                                                     
[10] "ATATTATGTAGAG"                                                                                                                                                                                                     
[11] "CTCAATGGCTAGTGGTGAAGGCGAACTCATACGATAGAGGCAGTGGAAGCCTCCTGGTCAGAACGCCTCCTTACAATCTCCGATCAGTGTGCGGGTGGCAGGAAGCAAAAGTTGTTCCGCGGAAGATCCTAGGGTCACCCATGCATACCCACGGCTTACATCAGTCCGCATGCCAGGTAGTTGAAGGGATAGGTTGCTTCACGTCCTCGC"
[12] "GTAACCTGGCACTTCATGTAGTAATACGT"                                                                                                                                                                                     
[13] "ACATTCCCGGTTCGCCATCTG"                                                                                                                                                                                             
[14] "AGTACCGCCAAAAGTG"                                                                                                                                                                                                  
[15] "AGTACCGCCAAAAGTG"                                                                                                                                                                                                  
[16] "TTAACTCACTCAA"                                                                                                                                                                                                     
[17] "ACATTCCCGGTTCGCCATCTG"                                                                                                                                                                                             
[18] "ACATTCCCGGTTCGCCATCTG"                                                                                                                                                                                             
[19] "AGTACCGCCAAAAGTG"                                                                                                                                                                                                  
> test<-sample(1:10)
> test
 [1]  8  9  6 10  7  5  1  4  3  2
> str(test)
 int [1:10] 8 9 6 10 7 5 1 4 3 2
> c(test)
 [1]  8  9  6 10  7  5  1  4  3  2
> test
 [1]  8  9  6 10  7  5  1  4  3  2
> str(test)
 int [1:10] 8 9 6 10 7 5 1 4 3 2
> for (i in test){print i}
Error: unexpected symbol in "for (i in test){print i"
> for (item in test) {}
> for (item in test) { print item}
Error: unexpected symbol in "for (item in test) { print item"
> for (item in test) { print test[item]}
Error: unexpected symbol in "for (item in test) { print test"
> test
 [1]  8  9  6 10  7  5  1  4  3  2
> test <- c(test)
> test
 [1]  8  9  6 10  7  5  1  4  3  2
> for (t in test) {print(t)}
[1] 8
[1] 9
[1] 6
[1] 10
[1] 7
[1] 5
[1] 1
[1] 4
[1] 3
[1] 2
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 13
[1] 15
Error in sample.int(length(x), size, replace, prob) : 
  cannot take a sample larger than the population when 'replace = FALSE'
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 11
[1] 15
[1] 8
[1] 12
> 
> 
> 
> 
> transcript <- strsplit(transcripts[t,], "")[[1]]
> 		eq_classes <- c()
> 		eq_string <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
> transcript
   [1] "|" "A" "A" "G" "G" "G" "C" "A" "A" "T" "G" "A" "G" "T"
  [15] "A" "G" "G" "C" "T" "A" "C" "A" "G" "T" "G" "C" "G" "G"
  [29] "G" "G" "A" "G" "G" "C" "C" "C" "A" "G" "T" "A" "T" "C"
  [43] "C" "T" "G" "A" "A" "G" "G" "T" "A" "G" "G" "C" "T" "T"
  [57] "C" "A" "G" "C" "C" "C" "C" "G" "T" "C" "T" "G" "A" "G"
  [71] "G" "A" "T" "C" "C" "T" "A" "A" "T" "C" "G" "G" "|" "C"
  [85] "G" "T" "T" "C" "A" "A" "G" "A" "T" "|" "A" "T" "A" "G"
  [99] "G" "C" "C" "T" "|" "G" "G" "T" "A" "A" "T" "G" "A" "G"
 [113] "G" "G" "C" "C" "A" "|" "T" "T" "G" "G" "C" "C" "C" "G"
 [127] "T" "C" "T" "C" "T" "A" "G" "G" "A" "A" "C" "T" "T" "A"
 [141] "T" "A" "A" "A" "A" "G" "C" "G" "G" "T" "C" "G" "G" "C"
 [155] "C" "A" "C" "A" "A" "C" "T" "|" "A" "A" "G" "C" "T" "C"
 [169] "A" "A" "G" "A" "C" "|" "T" "A" "G" "C" "A" "C" "C" "A"
 [183] "A" "A" "A" "T" "T" "A" "T" "A" "T" "A" "C" "T" "G" "A"
 [197] "G" "T" "C" "C" "A" "A" "G" "A" "G" "T" "A" "|" "C" "C"
 [211] "G" "C" "G" "A" "T" "T" "C" "A" "A" "G" "T" "A" "T" "|"
 [225] "A" "A" "T" "G" "G" "T" "C" "A" "G" "A" "|" "T" "G" "G"
 [239] "A" "G" "G" "T" "C" "C" "C" "C" "G" "G" "G" "A" "A" "A"
 [253] "C" "|" "A" "C" "T" "G" "G" "A" "G" "A" "G" "C" "G" "G"
 [267] "T" "T" "G" "T" "G" "T" "T" "A" "T" "T" "C" "C" "G" "A"
 [281] "C" "T" "G" "T" "G" "A" "T" "A" "G" "G" "C" "A" "G" "A"
 [295] "C" "T" "A" "A" "C" "C" "C" "C" "A" "A" "C" "C" "A" "G"
 [309] "C" "G" "G" "G" "G" "A" "C" "G" "A" "A" "A" "T" "G" "G"
 [323] "C" "A" "G" "T" "C" "T" "G" "C" "C" "G" "T" "C" "A" "C"
 [337] "G" "C" "G" "C" "G" "C" "A" "A" "G" "T" "A" "G" "T" "C"
 [351] "G" "A" "T" "A" "C" "C" "G" "T" "A" "G" "A" "A" "C" "G"
 [365] "T" "C" "T" "A" "T" "A" "T" "G" "T" "A" "A" "C" "T" "T"
 [379] "G" "T" "G" "C" "C" "C" "C" "A" "A" "C" "T" "G" "G" "A"
 [393] "A" "T" "T" "G" "A" "C" "C" "T" "C" "T" "C" "T" "A" "G"
 [407] "C" "C" "T" "T" "G" "C" "T" "G" "A" "A" "T" "C" "G" "G"
 [421] "C" "G" "C" "A" "G" "A" "G" "A" "C" "T" "T" "G" "A" "C"
 [435] "T" "A" "C" "T" "G" "A" "T" "T" "G" "A" "G" "A" "A" "G"
 [449] "C" "T" "G" "A" "C" "A" "C" "T" "T" "T" "A" "A" "G" "G"
 [463] "C" "T" "A" "T" "G" "C" "C" "T" "T" "G" "C" "G" "A" "G"
 [477] "G" "T" "A" "A" "C" "C" "T" "G" "G" "T" "C" "G" "A" "T"
 [491] "T" "A" "C" "T" "T" "C" "A" "G" "T" "G" "T" "T" "C" "T"
 [505] "A" "A" "T" "G" "T" "T" "A" "G" "T" "G" "C" "T" "C" "C"
 [519] "C" "T" "T" "A" "A" "A" "A" "C" "C" "C" "G" "C" "T" "C"
 [533] "A" "T" "A" "G" "C" "C" "A" "G" "G" "C" "A" "A" "G" "G"
 [547] "T" "A" "T" "A" "T" "G" "A" "T" "G" "C" "G" "G" "C" "G"
 [561] "T" "A" "C" "C" "C" "A" "T" "T" "T" "T" "T" "A" "G" "A"
 [575] "C" "A" "G" "T" "A" "T" "T" "G" "T" "A" "G" "C" "T" "G"
 [589] "A" "A" "A" "C" "A" "C" "T" "G" "G" "T" "G" "A" "C" "A"
 [603] "C" "T" "A" "G" "A" "G" "T" "C" "G" "T" "C" "T" "C" "A"
 [617] "A" "T" "C" "A" "C" "T" "G" "G" "T" "T" "G" "C" "T" "C"
 [631] "G" "A" "G" "G" "T" "T" "G" "A" "G" "G" "C" "C" "T" "C"
 [645] "G" "T" "A" "G" "G" "C" "T" "G" "G" "C" "C" "G" "A" "C"
 [659] "G" "G" "A" "C" "C" "C" "T" "T" "C" "G" "A" "A" "A" "A"
 [673] "G" "G" "T" "T" "T" "G" "G" "C" "A" "T" "T" "C" "A" "G"
 [687] "C" "G" "C" "C" "G" "C" "T" "T" "T" "T" "T" "C" "C" "A"
 [701] "T" "T" "A" "T" "T" "G" "C" "C" "A" "A" "G" "G" "G" "T"
 [715] "C" "T" "G" "T" "G" "C" "A" "A" "G" "A" "G" "A" "A" "T"
 [729] "A" "T" "G" "T" "C" "G" "T" "G" "T" "C" "A" "A" "A" "G"
 [743] "C" "G" "T" "G" "C" "G" "G" "A" "T" "A" "T" "G" "G" "G"
 [757] "T" "G" "C" "C" "T" "T" "G" "T" "T" "G" "G" "C" "T" "G"
 [771] "G" "T" "T" "C" "A" "A" "A" "A" "C" "T" "A" "G" "C" "C"
 [785] "G" "C" "G" "C" "T" "C" "A" "G" "T" "C" "T" "C" "A" "A"
 [799] "A" "G" "A" "T" "A" "T" "T" "C" "G" "G" "A" "G" "T" "A"
 [813] "G" "A" "A" "G" "C" "G" "G" "T" "T" "T" "T" "G" "C" "T"
 [827] "A" "G" "T" "T" "A" "G" "G" "T" "C" "G" "T" "G" "T" "T"
 [841] "C" "T" "G" "C" "A" "T" "C" "G" "G" "A" "C" "G" "C" "T"
 [855] "T" "T" "T" "A" "G" "T" "G" "C" "A" "A" "G" "G" "G" "T"
 [869] "G" "C" "C" "T" "C" "C" "A" "T" "A" "G" "A" "A" "C" "C"
 [883] "G" "C" "G" "G" "C" "G" "C" "T" "G" "A" "A" "A" "T" "C"
 [897] "A" "A" "T" "G" "A" "T" "T" "T" "A" "A" "G" "A" "A" "G"
 [911] "G" "C" "A" "T" "G" "A" "T" "G" "G" "A" "A" "T" "C" "C"
 [925] "C" "G" "C" "A" "A" "A" "G" "G" "G" "A" "T" "G" "G" "C"
 [939] "T" "C" "G" "C" "G" "C" "C" "T" "C" "C" "C" "T" "A" "T"
 [953] "G" "C" "T" "T" "C" "A" "A" "A" "C" "G" "T" "C" "G" "A"
 [967] "C" "T" "G" "C" "C" "G" "G" "C" "G" "C" "A" "A" "A" "T"
 [981] "G" "A" "G" "T" "A" "C" "C" "G" "C" "A" "C" "A" "A" "T"
 [995] "G" "A" "T" "G" "T" "A" "G" "A" "C" "C" "T" "C" "C" "G"
[1009] "G" "G" "G" "|"
> eq_classes
 [1] "AAGGGCAATGAGTAGGCTACAGTGCGGGGAGGCCCAGTATCCTGAAGGTAGGCTTCAGCCCCGTCTGAGGATCCTAATCGG"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

 [3] "ATAGGCCT"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             

 [5] "TTGGCCCGTCTCTAGGAACTTATAAAAGCGGTCGGCCACAACT"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          

 [7] "TAGCACCAAAATTATATACTGAGTCCAAGAGTA"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    


[10] "TGGAGGTCCCCGGGAAAC"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
[11] "ACTGGAGAGCGGTTGTGTTATTCCGACTGTGATAGGCAGACTAACCCCAACCAGCGGGGACGAAATGGCAGTCTGCCGTCACGCGCGCAAGTAGTCGATACCGTAGAACGTCTATATGTAACTTGTGCCCCAACTGGAATTGACCTCTCTAGCCTTGCTGAATCGGCGCAGAGACTTGACTACTGATTGAGAAGCTGACACTTTAAGGCTATGCCTTGCGAGGTAACCTGGTCGATTACTTCAGTGTTCTAATGTTAGTGCTCCCTTAAAACCCGCTCATAGCCAGGCAAGGTATATGATGCGGCGTACCCATTTTTAGACAGTATTGTAGCTGAAACACTGGTGACACTAGAGTCGTCTCAATCACTGGTTGCTCGAGGTTGAGGCCTCGTAGGCTGGCCGACGGACCCTTCGAAAAGGTTTGGCATTCAGCGCCGCTTTTTCCATTATTGCCAAGGGTCTGTGCAAGAGAATATGTCGTGTCAAAGCGTGCGGATATGGGTGCCTTGTTGGCTGGTTCAAAACTAGCCGCGCTCAGTCTCAAAGATATTCGGAGTAGAAGCGGTTTTGCTAGTTAGGTCGTGTTCTGCATCGGACGCTTTTAGTGCAAGGGTGCCTCCATAGAACCGCGGCGCTGAAATCAATGATTTAAGAAGGCATGATGGAATCCCGCAAAGGGATGGCTCGCGCCTCCCTATGCTTCAAACGTCGACTGCCGGCGCAAATGAGTACCGCACAATGATGTAGACCTCCGGGG"
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 11
[1] 9
[1] 20
[1] 9
> 
> 
> 
> 
> 
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 11
[1] 11
[1] 10
[1] 10
> 
> 
> 
> 
> 
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 16
[1] 16
[1] 16
[1] 8
> 
> 
> 
> 
> 
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 13
[1] 21
[1] 19
[1] 10
> 
> 
> 
> 
> 
> for (t in 1:nrow(dataf)) {
+ 		#iterate through all transcripts
+ 		transcript <- strsplit(dataf[t,], "")[[1]]
+ 		eq_classes <- c()
+ 		eq_string <- NULL
+ 		#parse string
+ 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}
+ 
+ 
+ 
+ 
+ }
Error in nrow(dataf) : object 'dataf' not found
> for (t in 1:nrow(transcripts)) {
+ 		#iterate through all transcripts
+ 		transcript <- strsplit(transcripts[t,], "")[[1]]
+ 		eq_classes <- c()
+ 		eq_string <- NULL
+ 		#parse string
+ 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}}
> eq_classes
[1] "CACTCGATCGCGAGAGCTGCGGTTCTGACTGGTCTGGCGCAGCTTCCAATTTTCTCAAGGTAACCAGATGATAAACTCAACGTGGCGCGTCTTCCCTGCCTGATATTGCTGACTCGACACCCCGCACAACGATACTATATTGAAAGCGTCAATGCATTGGCCCGGATCACATTTATACAGACCTGACTCTACGGTGAATATGCTAGTGCGAGGTCTCGATCTCGCATACTAAAGAATTGCGAGTCTACAACATTGAGTCTGTAACATTCGTTCACATTAGGAAGTCATCATACGAGCTAAAGTGTGGGATATTTTGAAAAGATGCCCTTGCGTGGCTTTCATAAGCATTGCTCGGGGCGCGTGGGTCGGCATACATTGGGCGCATAGCCATGGTGAACCAACGTAGACCTGTGCCCTCAACAATTCTTTATATGAATTTTTTCGTTAGGTCGTGGACATCGCATTGTTTGAACGCCCATGGCGTTCTCTCGACGCTGAGGTCTACTCCCGTCACACCGTAGGCTGTCTTCTCCCGCTTAGCAAATGTATGGTAGACAAGCGTCCAAACGAACATGCAATACTAGTAACGCATTGGCGAAACTTCGCCCCACGCAATCCAAACGGTTTAATAGCTGTTGGGAAGCGGACCCAGCCTAGCCTCTAGGGGCTTCAGACTACTGGTAGGCCTCACGCCATTCACTGGTGAAGGAAGGAGGAAAACGCAGGTTGTTGGCGTCACAATATATTTCAACGGACCTCGGCCACTTGTCGCTGTCACCAATAGTGTGGGGCCCGCGGGTGGCCGAGGCATATTAAAGACCGGTAGAGCCAAGCCTGAGAACGCAAAAATGTAAGTAACGCGAGTGCTAGTACATTCATCAGCCAACGTCGTATCGGGGCGAATAAGCTTTTGGGCGAACAATTGCGCTTCTGGGAT"



> nchar("CACTCGATCGCGAGAGCTGCGGTTCTGACTGGTCTGGCGCAGCTTCCAATTTTCTCAAGGTAACCAGATGATAAACTCAACGTGGCGCGTCTTCCCTGCCTGATATTGCTGACTCGACACCCCGCACAACGATACTATATTGAAAGCGTCAATGCATTGGCCCGGATCACATTTATACAGACCTGACTCTACGGTGAATATGCTAGTGCGAGGTCTCGATCTCGCATACTAAAGAATTGCGAGTCTACAACATTGAGTCTGTAACATTCGTTCACATTAGGAAGTCATCATACGAGCTAAAGTGTGGGATATTTTGAAAAGATGCCCTTGCGTGGCTTTCATAAGCATTGCTCGGGGCGCGTGGGTCGGCATACATTGGGCGCATAGCCATGGTGAACCAACGTAGACCTGTGCCCTCAACAATTCTTTATATGAATTTTTTCGTTAGGTCGTGGACATCGCATTGTTTGAACGCCCATGGCGTTCTCTCGACGCTGAGGTCTACTCCCGTCACACCGTAGGCTGTCTTCTCCCGCTTAGCAAATGTATGGTAGACAAGCGTCCAAACGAACATGCAATACTAGTAACGCATTGGCGAAACTTCGCCCCACGCAATCCAAACGGTTTAATAGCTGTTGGGAAGCGGACCCAGCCTAGCCTCTAGGGGCTTCAGACTACTGGTAGGCCTCACGCCATTCACTGGTGAAGGAAGGAGGAAAACGCAGGTTGTTGGCGTCACAATATATTTCAACGGACCTCGGCCACTTGTCGCTGTCACCAATAGTGTGGGGCCCGCGGGTGGCCGAGGCATATTAAAGACCGGTAGAGCCAAGCCTGAGAACGCAAAAATGTAAGTAACGCGAGTGCTAGTACATTCATCAGCCAACGTCGTATCGGGGCGAATAAGCTTTTGGGCGAACAATTGCGCTTCTGGGAT")
[1] 937
> chopped_up
cuts
1 CACTCGATCGCGAGAGCTGCGGTTCTGACTGGTCTGGCGCAGCTTCCAATTTTCTCAAGGTAACCAGATGATAAACTCAACGTGGCGCGTCTTCCCTGCCTGATATTGCTGACTCGACACCCCGCACAACGATACTATATTGAAAGCGTCAATGCATTGGCCCGGATCACATTTATACAGACCTGACTCTACGGTGAATATGCTAGTGCGAGGTCTCGATCTCGCATACTAAAGAATTGCGAGTCTACAACATTGAGTCTGTAACATTCGTTCACATTAGGAAGTCATCATACGAGCTAAAGTGTGGGATATTTTGAAAAGATGCCCTTGCGTGGCTTTCATAAGCATTGCTCGGGGCGCGTGGGTCGGCATACATTGGGCGCATAGCCATGGTGAACCAACGTAGACCTGTGCCCTCAACAATTCTTTATATGAATTTTTTCGTTAGGTCGTGGACATCGCATTGTTTGAACGCCCATGGCGTTCTCTCGACGCTGAGGTCTACTCCCGTCACACCGTAGGCTGTCTTCTCCCGCTTAGCAAATGTATGGTAGACAAGCGTCCAAACGAACATGCAATACTAGTAACGCATTGGCGAAACTTCGCCCCACGCAATCCAAACGGTTTAATAGCTGTTGGGAAGCGGACCCAGCCTAGCCTCTAGGGGCTTCAGACTACTGGTAGGCCTCACGCCATTCACTGGTGAAGGAAGGAGGAAAACGCAGGTTGTTGGCGTCACAATATATTTCAACGGACCTCGGCCACTTGTCGCTGTCACCAATAGTGTGGGGCCCGCGGGTGGCCGAGGCATATTAAAGACCGGTAGAGCCAAGCCTGAGAACGCAAAAATGTAAGTAACGCGAGTGCTAGTACATTCATCAGCCAACGTCGTATCGGGGCGAATAAGCTTTTGGGCGAACAATTGCGCTTCTGGGAT
2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               TATGTACTTCGCTGGCGGATTAATAGC


> opstr
[1] "ATATGTACTTCGCTGGCGGATTAATAGCGTTCAACACAGCGATCAGCGTGGCACTCGATCGCGAGAGCTGCGGTTCTGACTGGTCTGGCGCAGCTTCCAATTTTCTCAAGGTAACCAGATGATAAACTCAACGTGGCGCGTCTTCCCTGCCTGATATTGCTGACTCGACACCCCGCACAACGATACTATATTGAAAGCGTCAATGCATTGGCCCGGATCACATTTATACAGACCTGACTCTACGGTGAATATGCTAGTGCGAGGTCTCGATCTCGCATACTAAAGAATTGCGAGTCTACAACATTGAGTCTGTAACATTCGTTCACATTAGGAAGTCATCATACGAGCTAAAGTGTGGGATATTTTGAAAAGATGCCCTTGCGTGGCTTTCATAAGCATTGCTCGGGGCGCGTGGGTCGGCATACATTGGGCGCATAGCCATGGTGAACCAACGTAGACCTGTGCCCTCAACAATTCTTTATATGAATTTTTTCGTTAGGTCGTGGACATCGCATTGTTTGAACGCCCATGGCGTTCTCTCGACGCTGAGGTCTACTCCCGTCACACCGTAGGCTGTCTTCTCCCGCTTAGCAAATGTATGGTAGACAAGCGTCCAAACGAACATGCAATACTAGTAACGCATTGGCGAAACTTCGCCCCACGCAATCCAAACGGTTTAATAGCTGTTGGGAAGCGGACCCAGCCTAGCCTCTAGGGGCTTCAGACTACTGGTAGGCCTCACGCCATTCACTGGTGAAGGAAGGAGGAAAACGCAGGTTGTTGGCGTCACAATATATTTCAACGGACCTCGGCCACTTGTCGCTGTCACCAATAGTGTGGGGCCCGCGGGTGGCCGAGGCATATTAAAGACCGGTAGAGCCAAGCCTGAGAACGCAAAAATGTAAGTAACGCGAGTGCTAGTACATTCATCAGCCAACGTCGTATCGGGGCGAATAAGCTTTTGGGCGAACAATTGCGCTTCTGGGATTCGGGTGCCGCA"
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> 
> chopped_up
cuts
1  GGCACTCGATCGCGAGAGCTGCGGTTCTGACTGGTCTGGCGCAGCTTCCAATTTTCTCAAGGTAACCAGATGATAAACTCAACGTGGCGCGTCTTCCCTGCCTGATATTGCTGACTCGACACCCCGCACAACGATACTATATTGAAAGCGTCAATGCATTGGCCCGGATCACATTTATACAGACCTGACTCTACGGTGAATATGCTAGTGCGAGGTCTCGATCTCGCATACTAAAGAATTGCGAGTCTACAACATTGAGTCTGTAACATTCGTTCACATTAGGAAGTCATCATACGAGCTAAAGTGTGGGATATTTTGAAAAGATGCCCTTGCGTGGCTTTCATAAGCATTGCTCGGGGCGCGTGGGTCGGCATACATTGGGCGCATAGCCATGGTGAACCAACGTAGACCTGTGCCCTCAACAATTCTTTATATGAATTTTTTCGTTAGGTCGTGGACATCGCATTGTTTGAACGCCCATGGCGTTCTCTCGACGCTGAGGTCTACTCCCGTCACACCGTAGGCTGTCTTCTCCCGCTTAGCAAATGTATGGTAGACAAGCGTCCAAACGAACATGCAATACTAGTAACGCATTGGCGAAACTTCGCCCCACGCAATCCAAACGGTTTAATAGCTGTTGGGAAGCGGACCCAGCCTAGCCTCTAGGGGCTTCAGACTACTGGTAGGCCTCACGCCATTCACTGGTGAAGGAAGGAGGAAAACGCAGGTTGTTGGCGTCACAATATATTTC


4                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                TCAAAAGACCGGTAGAGCCAAGCCTGAGAACGC



8                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             TCGGGGCGAATAAGCTTTTG



> create_cuts <- function(
+ 	operating_str = NULL,
+ 	filterby = NULL,
+ 	filter = FALSE,
+ 	cuts = NULL) {
+ 
+ 	if (is.null(cuts)) {
+ 		cuts <- 1000
+ 	}
+ 	if (is.null(operating_str)) {
+ 		operating_str <- generate_string(300000)
+ 	}
+ 	if (is.null(filterby)) {
+ 		filterby <- 100
+ 	}
+ 	i <- 1;
+ 	cuts_vector <- c()
+ 	while (operating_str != "" && i <= cuts) {
+ 		start <- as.integer(sample(0:i, 1) + 1)
+ 		end <- as.integer(sample((10:20) * start, 1))
+ 		cut <- substr(operating_str, start, end)
+ 		cuts_vector <- c(cuts_vector, cut)
+ 		operating_str <- gsub(cut, "", operating_str)
+ 		i <- i + 1
+ 	}
+ 	#filter 
+ 	if (filter) {
+ 		actual_cuts <- mapply(function(x) { if (nchar(x) >= filterby) return (TRUE) else return (FALSE) }, cuts_vector)
+ 		cuts_vector <- cuts_vector[actual_cuts == TRUE]
+ 	}
+ 	cuts_df <- data.frame(cuts = cuts_vector, stringsAsFactors = FALSE)
+ 	cuts_df
+ }
> 
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 8
[1] 9
[1] 9
[1] 19
> 
> 
> 
> 
> 
> 
> 
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 9
[1] 9
[1] 9
[1] 8
> 
> 
> 
> 
> 
> 
> 
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
[1] 15
[1] 10
[1] 9
[1] 17
> 
> 
> 
> 
> 
> 
> 
> dataf<- transcripts
> t
[1] 4
> t<-1
> for (t in 1:nrow(dataf)) {
+ 		#iterate through all transcripts
+ 		transcript <- strsplit(dataf[t,], "")[[1]]
+ 		eq_classes <- c()
+ 		eq_string <- NULL
+ 		#parse string
+ 		for (base in transcript) {
+ 			if (base != "|") {
+ 				i <- i + 1
+ 				eq_string <- paste(eq_string, base, sep="")
+ 			} else {
+ 				eq_classes <- c(eq_classes, eq_string)
+ 				eq_string <- NULL
+ 			}
+ 		}}
> eq_classes
 [1] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
 [2] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
 [3] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [4] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [5] "CCTCAATCGGTCT"                                                                                                                                              
 [6] "CGTCCCTCCTC"                                                                                                                                                
 [7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
 [8] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [9] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
[10] "AACAAGGATTCATCGC"                                                                                                                                           
[11] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
[12] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
[13] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[14] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
[15] "CGTCTCAATTGAGAAACC"                                                                                                                                         
> transcript_df <- eq_classes
> 	index_vector <- c(1)
> 	curr <- 1
> 	for i in nrow(transcript_df) {
Error: unexpected symbol in "        for i"
> 		read <- transcript_df[i,]
Error in transcript_df[i, ] : incorrect number of dimensions
> 		curr <- curr + nchar(read)
Error in nchar(read) : object 'read' not found
> 		index_vector <- c(index_vector, curr)
> 	}
Error: unexpected '}' in "        }"
> 	index_vector <- c(1)
> 	curr <- 1
> 	read <- transcript_df[i,]
Error in transcript_df[i, ] : incorrect number of dimensions
> eq_classes
 [1] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
 [2] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
 [3] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [4] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [5] "CCTCAATCGGTCT"                                                                                                                                              
 [6] "CGTCCCTCCTC"                                                                                                                                                
 [7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
 [8] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [9] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
[10] "AACAAGGATTCATCGC"                                                                                                                                           
[11] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
[12] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
[13] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[14] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
[15] "CGTCTCAATTGAGAAACC"                                                                                                                                         
> 		plot_df <- data.frame(reads=reads, stringsAsFactors=FALSE)
Error in data.frame(reads = reads, stringsAsFactors = FALSE) : 
  object 'reads' not found
> 
> plot_df <- data.frame(reads=eq_classes, stringsAsFactors=FALSE)
> transcript_df <- plot_df
> 	index_vector <- c(1)
> 	curr <- 1
> 	for i in nrow(transcript_df) {
Error: unexpected symbol in "        for i"
> 		read <- transcript_df[i,]
> 		curr <- curr + nchar(read)
> 		index_vector <- c(index_vector, curr)
> 	}
Error: unexpected '}' in "        }"
> 		read <- transcript_df[i,]
> 
> read
[1] NA
> transcript_df
                                                                                                                                                         reads
1  CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG
2                                                      TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG
3                                                                                                CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA
4                                                                            CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA
5                                                                                                                                                CCTCAATCGGTCT
6                                                                                                                                                  CGTCCCTCCTC
7                                                GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG
8                                            ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT
9                                                                                                                  TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT
10                                                                                                                                            AACAAGGATTCATCGC
11                                                                                                     GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC
12                                                                TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG
13                                                                                                                         AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC
14                                                                ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC
15                                                                                                                                          CGTCTCAATTGAGAAACC
> for i in nrow(transcript_df) {
Error: unexpected symbol in "for i"
> 		read <- transcript_df[i]
Error in `[.data.frame`(transcript_df, i) : undefined columns selected
> 		curr <- curr + nchar(read)
> 		index_vector <- c(index_vector, curr)
> 	}
Error: unexpected '}' in "        }"
> for i in nrow(transcript_df) { print i}
Error: unexpected symbol in "for i"
> for i in nrow(transcript_df) { print(i)}
Error: unexpected symbol in "for i"
> 	for (i in nrow(transcript_df)) {
+ 		read <- transcript_df[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
Error in `[.data.frame`(transcript_df, i) : undefined columns selected
> 	for (i in nrow(transcript_df)) {
+ 		read <- transcript_df[i,]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
> index_vector
[1]  1  3  5 23
> transcript_df
                                                                                                                                                         reads
1  CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG
2                                                      TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG
3                                                                                                CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA
4                                                                            CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA
5                                                                                                                                                CCTCAATCGGTCT
6                                                                                                                                                  CGTCCCTCCTC
7                                                GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG
8                                            ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT
9                                                                                                                  TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT
10                                                                                                                                            AACAAGGATTCATCGC
11                                                                                                     GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC
12                                                                TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG
13                                                                                                                         AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC
14                                                                ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC
15                                                                                                                                          CGTCTCAATTGAGAAACC
> 	for (i in nrow(transcript_df)) {
+ 		read <- transcript_df[i,]
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 18
> read
[1] "CGTCTCAATTGAGAAACC"
> reads
Error: object 'reads' not found
> eq_classes
 [1] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
 [2] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
 [3] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [4] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [5] "CCTCAATCGGTCT"                                                                                                                                              
 [6] "CGTCCCTCCTC"                                                                                                                                                
 [7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
 [8] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [9] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
[10] "AACAAGGATTCATCGC"                                                                                                                                           
[11] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
[12] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
[13] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[14] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
[15] "CGTCTCAATTGAGAAACC"                                                                                                                                         
> transcript <- eq_classes
> 	for (i in nrow(transcript)) {
+ 		read <- transcript[i]
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
> 
> transcript
 [1] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
 [2] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
 [3] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [4] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [5] "CCTCAATCGGTCT"                                                                                                                                              
 [6] "CGTCCCTCCTC"                                                                                                                                                
 [7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
 [8] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [9] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
[10] "AACAAGGATTCATCGC"                                                                                                                                           
[11] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
[12] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
[13] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[14] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
[15] "CGTCTCAATTGAGAAACC"                                                                                                                                         
> for (i in nrow(transcript)){print(i)}
> 
> nrow(transcript)
NULL
> length(transcript)
[1] 15
> 	for (i in length(transcript)) {
+ 		read <- transcript[i]
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 18
> index_vector
[1]  1  3  5 23 41 59
> for (i in length(transcript)) { print(transcript[i])}
[1] "CGTCTCAATTGAGAAACC"
> length(transcript)
[1] 15
> transcript
 [1] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
 [2] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
 [3] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [4] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [5] "CCTCAATCGGTCT"                                                                                                                                              
 [6] "CGTCCCTCCTC"                                                                                                                                                
 [7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
 [8] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [9] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
[10] "AACAAGGATTCATCGC"                                                                                                                                           
[11] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
[12] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
[13] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[14] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
[15] "CGTCTCAATTGAGAAACC"                                                                                                                                         
> transcript[1]
[1] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
> transcript[2]
[1] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript)) {
+ 		read <- transcript[i]
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 155
[1] 103
[1] 61
[1] 81
[1] 13
[1] 11
[1] 109
[1] 113
[1] 43
[1] 16
[1] 55
[1] 92
[1] 35
[1] 92
[1] 18
> 
> index_vector
 [1]   1 156 259 320 401 414 425 534 647 690 706 761 853 888
[15] 980 998
> transcript
 [1] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
 [2] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
 [3] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [4] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [5] "CCTCAATCGGTCT"                                                                                                                                              
 [6] "CGTCCCTCCTC"                                                                                                                                                
 [7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
 [8] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [9] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
[10] "AACAAGGATTCATCGC"                                                                                                                                           
[11] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
[12] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
[13] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[14] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
[15] "CGTCTCAATTGAGAAACC"                                                                                                                                         
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
integer(0)
[1] 155
[1] 103
[1] 61
[1] 81
[1] 13
[1] 11
[1] 109
[1] 113
[1] 43
[1] 16
[1] 55
[1] 92
[1] 35
[1] 92
> tests <- create_transcripts(chopped_up, length=10)
[1] 10
[1] 14
[1] 16
[1] 10
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	#determine truncation point
+ 	ret_average <- 0
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			#print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		#length rand is the number of "|" characters
+ 		ret_average <- ret_average + nchar(individual_transcript) - length(rand)
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_average <- ret_average / transcript_number
+ 	ret_df <- data.frame(transcripts = transcripts, avg = ret_average, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> transcripts <- create_transcripts(chopped_up, length=10)
> 
> transcripts
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> transcripts[,1]
[1] "|AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|"                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
[2] "|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|"                                                                                                                                                                                                                                                                                                         
[3] "|CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|"                                                        
[4] "|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|"
> transcripts[,3]
Error in `[.data.frame`(transcripts, , 3) : undefined columns selected
> transcripts[,2]
[1] 797 797 797 797
> transcripts[,2][1]
[1] 797
> transcripts[1,]
transcripts
1 |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
  avg
1 797
> transcripts[1,][[1]]
[1] "|AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|"
> transcropts[1,]
Error: object 'transcropts' not found
> transcripts[1,]
transcripts
1 |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
  avg
1 797
> transcripts
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> transcripts[1,][[1]]
[1] "|AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|"
> reads
Error: object 'reads' not found
> read
[1] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"
> dataf<- transcripts
> dataf
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> 	for (t in 1:nrow(dataf)) {
+ 		#iterate through all transcripts
+ 		transcript <- strsplit(dataf[t,], "")[[1]]
+ 		reads <- c()
+ 		read_str <- NULL
+ 		#parse string
+ 		for (base in transcript) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}}
Error in strsplit(dataf[t, ], "") : non-character argument
> dataf[t,]
transcripts
1 |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
  avg
1 797
> dataf[t,][[1]]
[1] "|AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|"
> strsplit(dataf[t,], "")[[1]]
Error in strsplit(dataf[t, ], "") : non-character argument
> 		transcript <- as.character(strsplit(dataf[t,], "")[[1]])
Error in strsplit(dataf[t, ], "") : non-character argument
> 
> as.character(dataf[t,][[1]])]
Error: unexpected ']' in "as.character(dataf[t,][[1]])]"
> data[t,][[1]]
Error in data[t, ] : object of type 'closure' is not subsettable
> dataf[t,][[1]]
[1] "|AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|"
> as.character(dataf[t,][[1]])
[1] "|AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|"
> strsplit(as.character(dataf[t,][[1]]),"")
[[1]]
  [1] "|" "A" "A" "C" "A" "A" "G" "G" "A" "T" "T" "C" "A" "T"
 [15] "C" "G" "C" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T"
 [29] "T" "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G"
 [43] "A" "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C"
 [57] "G" "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C"
 [71] "G" "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G"
 [85] "A" "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G"
 [99] "A" "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A"
[113] "C" "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A"
[127] "G" "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A"
[141] "G" "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G"
[155] "C" "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C"
[169] "T" "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C"
[183] "A" "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T"
[197] "T" "C" "G" "T" "C" "G" "G" "|" "C" "C" "T" "C" "A" "A"
[211] "T" "C" "G" "G" "T" "C" "T" "|" "A" "T" "T" "T" "C" "T"
[225] "T" "C" "A" "G" "A" "G" "A" "T" "T" "A" "C" "C" "T" "G"
[239] "T" "T" "A" "G" "A" "C" "C" "G" "A" "A" "C" "A" "G" "G"
[253] "C" "G" "G" "G" "G" "C" "A" "T" "T" "C" "C" "T" "T" "A"
[267] "C" "T" "C" "G" "G" "C" "C" "G" "G" "T" "T" "T" "G" "C"
[281] "G" "A" "C" "G" "A" "A" "G" "G" "T" "G" "A" "C" "T" "A"
[295] "A" "G" "C" "T" "G" "C" "A" "A" "T" "G" "T" "G" "A" "T"
[309] "G" "C" "C" "A" "A" "C" "A" "T" "A" "G" "T" "G" "G" "T"
[323] "C" "G" "A" "G" "T" "C" "T" "A" "T" "|" "C" "G" "T" "C"
[337] "C" "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G"
[351] "A" "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T"
[365] "G" "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C"
[379] "C" "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A"
[393] "A" "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G"
[407] "T" "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C"
[421] "C" "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T"
[435] "G" "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T"
[449] "T" "A" "T" "A" "G" "|" "T" "G" "A" "C" "G" "T" "C" "C"
[463] "A" "C" "C" "A" "T" "A" "C" "C" "C" "G" "G" "C" "C" "G"
[477] "T" "A" "C" "A" "T" "A" "C" "G" "T" "T" "T" "T" "T" "C"
[491] "T" "C" "A" "A" "C" "T" "T" "|" "G" "G" "G" "A" "T" "C"
[505] "G" "G" "C" "C" "A" "T" "C" "G" "G" "T" "G" "T" "G" "C"
[519] "G" "C" "C" "C" "T" "A" "G" "A" "A" "T" "T" "T" "T" "C"
[533] "A" "A" "A" "G" "T" "T" "C" "T" "A" "A" "C" "T" "G" "T"
[547] "T" "T" "A" "A" "A" "C" "C" "|"

> 	for (t in 1:nrow(dataf)) {
+ 		#iterate through all transcripts
+ 		transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 		reads <- c()
+ 		read_str <- NULL
+ 		#parse string
+ 		for (base in transcript) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}}
Warning messages:
1: In if (base != "|") { :
  the condition has length > 1 and only the first element will be used
2: In if (base != "|") { :
  the condition has length > 1 and only the first element will be used
3: In if (base != "|") { :
  the condition has length > 1 and only the first element will be used
4: In if (base != "|") { :
  the condition has length > 1 and only the first element will be used
> transcript
[[1]]
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"

> for (base in transcript){print(base)}
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"
> transcript <- strsplit(as.character(dataf[t,][[1]]),"")
> 		reads <- c()
> 		read_str <- NULL
> 		#parse string
> 		for (base in transcript) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}
Warning message:
In if (base != "|") { :
  the condition has length > 1 and only the first element will be used
> for (base in transcript) {print(base) print(\n)}
Error: unexpected symbol in "for (base in transcript) {print(base) print"
> for (base in transcript) {print(base) print("")}
Error: unexpected symbol in "for (base in transcript) {print(base) print"
> for (base in transcript) {print(base) print("")}
Error: unexpected symbol in "for (base in transcript) {print(base) print"
> for (base in transcript) {}
> for (base in transcript) {}
> for (base in transcript) {print(base + "     ")}
Error in base + "     " : non-numeric argument to binary operator
> transcripts
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> transcript
[[1]]
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"

> i <- 1
> for (base in transcript) {if (i <- 1) {print(base)}}
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"
> for (i in 1:length(transcript)) {print(transcript[i])}
[[1]]
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"

> for (i in 1:length(transcript)) {if (i%2==0) {print(transcript[i])}}
Error: unexpected input in "for (i in 1:length(transcript)) {if (i%2==0) {print(transcript[i])}}"
> e <- 2
> for (i in 1:length(transcript)) {if (e==2) {print(transcript[i])}}
[[1]]
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"

> str(transcript)
List of 1
 $ : chr [1:1013] "|" "A" "T" "T" ...
> for (i in 1:length(transcript)) {print(i)}
[1] 1
> transcript <- as.vector(transcript)
> transcript
[[1]]
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"

> str(transcript)
List of 1
 $ : chr [1:1013] "|" "A" "T" "T" ...
> length(transcript[1])
[1] 1
> length(transcript[1,])
Error in transcript[1, ] : incorrect number of dimensions
> length(transcript[[1]])
[1] 1013
> transcript <- strsplit(as.character(dataf[t,][[1]]),"")
> 		reads <- c()
> 		read_str <- NULL
> 		#parse string
> 		for (base in transcript[[1]]) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}
> reads
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> dataf
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> 	for (t in 1:nrow(dataf)) {
+ 		#iterate through all transcripts
+ 		transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 		reads <- c()
+ 		read_str <- NULL
+ 		#parse string
+ 		for (base in transcript[[1]]) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}}
> reads
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> 		transcript <- strsplit(as.character(dataf[t,][[1]]),"")
> 		reads <- c()
> 		read_str <- NULL
> 		#parse string
> 		for (base in transcript[[1]]) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}
> reads
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> t
[1] 4
> transcript
[[1]]
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"

> reads
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> transcript <- reads
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
integer(0)
[1] 113
[1] 81
[1] 92
[1] 13
[1] 92
[1] 61
[1] 43
[1] 55
[1] 155
[1] 103
[1] 35
[1] 18
[1] 16
[1] 11
> index_vector
[1] 1
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 		print(index_vector)
+ 	}
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
> 	index_vector <- c()
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 		print(index_vector)
+ 	}
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
> curr
numeric(0)
> 	index_vector <- c(1)
> 	curr <- 1
> transcript[1]
[1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"
> read <- transcript[1]
> curr <- curr + nchar(read)
> curr
[1] 114
> index_vector <- c(index_vector, curr)
> index_vector
[1]   1 114
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
> 
> index_vector
[1] 1
> transcript
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> length(transcript)
[1] 15
> transcript[1]
[1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		print(curr)
+ 		index_vector <- c(index_vector, curr)
+ 	}
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		print(curr)
+ 		curr <- curr + nchar(read)
+ 		print(curr)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 1
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
numeric(0)
> 
> 	#construct indexes given frames | lmaomlmao remember freaking R indexes at 1
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		print(curr)
+ 		curr <- nchar(read)
+ 		print(curr)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 1
integer(0)
integer(0)
[1] 113
[1] 113
[1] 81
[1] 81
[1] 92
[1] 92
[1] 13
[1] 13
[1] 92
[1] 92
[1] 61
[1] 61
[1] 43
[1] 43
[1] 55
[1] 55
[1] 155
[1] 155
[1] 103
[1] 103
[1] 35
[1] 35
[1] 18
[1] 18
[1] 16
[1] 16
[1] 11
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		print(i)
+ 		print(curr)
+ 		curr <- nchar(read)
+ 		print(curr)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 0
[1] 1
integer(0)
[1] 1
integer(0)
[1] 113
[1] 2
[1] 113
[1] 81
[1] 3
[1] 81
[1] 92
[1] 4
[1] 92
[1] 13
[1] 5
[1] 13
[1] 92
[1] 6
[1] 92
[1] 61
[1] 7
[1] 61
[1] 43
[1] 8
[1] 43
[1] 55
[1] 9
[1] 55
[1] 155
[1] 10
[1] 155
[1] 103
[1] 11
[1] 103
[1] 35
[1] 12
[1] 35
[1] 18
[1] 13
[1] 18
[1] 16
[1] 14
[1] 16
[1] 11
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:length(transcript) - 1) {
+ 		read <- transcript[i]
+ 		print(i)
+ 		print("")
+ 		print(curr)
+ 		print("")
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 0
[1] ""
[1] 1
[1] ""
integer(0)
[1] 1
[1] ""
numeric(0)
[1] ""
[1] 113
[1] 2
[1] ""
numeric(0)
[1] ""
[1] 81
[1] 3
[1] ""
numeric(0)
[1] ""
[1] 92
[1] 4
[1] ""
numeric(0)
[1] ""
[1] 13
[1] 5
[1] ""
numeric(0)
[1] ""
[1] 92
[1] 6
[1] ""
numeric(0)
[1] ""
[1] 61
[1] 7
[1] ""
numeric(0)
[1] ""
[1] 43
[1] 8
[1] ""
numeric(0)
[1] ""
[1] 55
[1] 9
[1] ""
numeric(0)
[1] ""
[1] 155
[1] 10
[1] ""
numeric(0)
[1] ""
[1] 103
[1] 11
[1] ""
numeric(0)
[1] ""
[1] 35
[1] 12
[1] ""
numeric(0)
[1] ""
[1] 18
[1] 13
[1] ""
numeric(0)
[1] ""
[1] 16
[1] 14
[1] ""
numeric(0)
[1] ""
[1] 11
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:(length(transcript - 1))) {
+ 		read <- transcript[i]
+ 		print(i)
+ 		print("")
+ 		print(curr)
+ 		print("")
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
Error in transcript - 1 : non-numeric argument to binary operator
> 
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:(length(transcript) - 1)) {
+ 		read <- transcript[i]
+ 		print(i)
+ 		print("")
+ 		print(curr)
+ 		print("")
+ 		print(nchar(read))
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
[1] 1
[1] ""
[1] 1
[1] ""
[1] 113
[1] 2
[1] ""
[1] 114
[1] ""
[1] 81
[1] 3
[1] ""
[1] 195
[1] ""
[1] 92
[1] 4
[1] ""
[1] 287
[1] ""
[1] 13
[1] 5
[1] ""
[1] 300
[1] ""
[1] 92
[1] 6
[1] ""
[1] 392
[1] ""
[1] 61
[1] 7
[1] ""
[1] 453
[1] ""
[1] 43
[1] 8
[1] ""
[1] 496
[1] ""
[1] 55
[1] 9
[1] ""
[1] 551
[1] ""
[1] 155
[1] 10
[1] ""
[1] 706
[1] ""
[1] 103
[1] 11
[1] ""
[1] 809
[1] ""
[1] 35
[1] 12
[1] ""
[1] 844
[1] ""
[1] 18
[1] 13
[1] ""
[1] 862
[1] ""
[1] 16
[1] 14
[1] ""
[1] 878
[1] ""
[1] 11
> 	index_vector <- c(1)
> 	curr <- 1
> 	for (i in 1:(length(transcript) - 1)) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
> index_vector
 [1]   1 114 195 287 300 392 453 496 551 706 809 844 862 878
[15] 889
> dataf
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> reads
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> transcript
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> dataf
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> 		maxl <- 0
> 		find_trunc <- strsplit(as.character(dataf[t,][[1]]),"")
> 		for (i in 1:nrow(find_trunc)) {
+ 			if (maxl < nchar(find_trunc[i])) {
+ 				maxl <- nchar(find_trunc[i])
+ 			}
+ 		}
Error in 1:nrow(find_trunc) : argument of length 0
> find_trunc
[[1]]
   [1] "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G" "A"
  [15] "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C"
  [29] "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A"
  [43] "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C"
  [57] "G" "G" "T" "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G"
  [71] "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A"
  [85] "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A"
  [99] "T" "A" "G" "T" "G" "G" "T" "C" "G" "A" "G" "T" "C" "T"
 [113] "A" "T" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T"
 [127] "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A"
 [141] "T" "A" "A" "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G"
 [155] "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G"
 [169] "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A"
 [183] "C" "A" "C" "A" "T" "T" "T" "A" "C" "T" "C" "G" "G" "A"
 [197] "|" "A" "C" "A" "G" "A" "T" "T" "T" "G" "A" "C" "G" "A"
 [211] "C" "C" "T" "T" "C" "G" "G" "C" "G" "G" "T" "A" "G" "G"
 [225] "A" "A" "G" "G" "A" "T" "A" "A" "C" "C" "T" "G" "C" "A"
 [239] "A" "A" "C" "T" "T" "G" "T" "T" "A" "G" "T" "G" "C" "G"
 [253] "G" "A" "T" "A" "G" "A" "T" "C" "A" "C" "C" "T" "G" "T"
 [267] "C" "T" "A" "A" "G" "A" "C" "A" "A" "C" "T" "T" "C" "T"
 [281] "T" "T" "T" "A" "G" "T" "A" "T" "C" "|" "C" "C" "T" "C"
 [295] "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "T" "T" "A" "A"
 [309] "G" "T" "C" "T" "A" "A" "C" "A" "A" "T" "C" "A" "C" "T"
 [323] "G" "G" "A" "G" "T" "C" "G" "A" "T" "G" "A" "A" "T" "C"
 [337] "G" "C" "T" "G" "G" "A" "T" "C" "C" "G" "A" "T" "A" "G"
 [351] "A" "A" "T" "A" "A" "C" "A" "T" "T" "G" "T" "C" "A" "T"
 [365] "G" "G" "T" "T" "G" "G" "A" "C" "C" "C" "C" "A" "C" "C"
 [379] "T" "C" "A" "C" "G" "T" "G" "G" "T" "C" "G" "C" "T" "G"
 [393] "C" "G" "G" "G" "|" "C" "G" "T" "A" "C" "C" "A" "G" "A"
 [407] "A" "T" "C" "C" "A" "T" "C" "G" "C" "T" "T" "G" "G" "C"
 [421] "G" "C" "T" "G" "T" "C" "G" "G" "G" "T" "G" "T" "T" "A"
 [435] "G" "C" "T" "T" "T" "G" "C" "C" "C" "C" "A" "C" "G" "C"
 [449] "A" "A" "T" "C" "G" "A" "G" "G" "G" "A" "|" "T" "G" "A"
 [463] "C" "G" "T" "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C"
 [477] "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T"
 [491] "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G"
 [505] "G" "G" "A" "T" "C" "G" "G" "C" "C" "A" "T" "C" "G" "G"
 [519] "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A"
 [533] "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A"
 [547] "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C" "C" "|" "C"
 [561] "A" "T" "A" "C" "G" "T" "C" "T" "C" "C" "C" "T" "A" "C"
 [575] "G" "A" "A" "A" "G" "G" "C" "A" "C" "A" "C" "C" "A" "A"
 [589] "C" "G" "T" "G" "A" "T" "G" "A" "G" "T" "G" "A" "A" "T"
 [603] "T" "T" "A" "A" "T" "A" "C" "C" "T" "G" "C" "G" "T" "G"
 [617] "T" "G" "C" "G" "A" "T" "C" "G" "C" "T" "C" "C" "T" "A"
 [631] "A" "C" "T" "G" "G" "C" "C" "T" "T" "G" "A" "T" "G" "C"
 [645] "T" "T" "G" "C" "G" "G" "G" "T" "A" "C" "A" "A" "C" "T"
 [659] "G" "G" "T" "C" "G" "G" "G" "T" "A" "C" "T" "C" "C" "A"
 [673] "G" "C" "A" "T" "C" "G" "T" "A" "A" "C" "T" "G" "G" "G"
 [687] "G" "T" "C" "C" "T" "G" "T" "T" "C" "C" "T" "A" "C" "C"
 [701] "G" "T" "T" "C" "T" "T" "G" "A" "A" "G" "T" "C" "A" "G"
 [715] "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C"
 [729] "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G"
 [743] "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G" "C" "A" "G"
 [757] "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C"
 [771] "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T"
 [785] "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A"
 [799] "T" "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T"
 [813] "C" "G" "T" "C" "G" "G" "|" "A" "G" "A" "G" "A" "C" "A"
 [827] "G" "C" "A" "T" "G" "C" "A" "G" "T" "C" "T" "A" "G" "T"
 [841] "C" "G" "A" "A" "C" "T" "T" "T" "G" "C" "C" "C" "C" "C"
 [855] "|" "C" "G" "T" "C" "T" "C" "A" "A" "T" "T" "G" "A" "G"
 [869] "A" "A" "A" "C" "C" "|" "A" "A" "C" "A" "A" "G" "G" "A"
 [883] "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "G" "T" "C" "C"
 [897] "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A"
 [911] "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G"
 [925] "C" "T" "T" "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C"
 [939] "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A"
 [953] "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T"
 [967] "T" "C" "C" "C" "T" "G" "G" "T" "G" "A" "C" "C" "C" "C"
 [981] "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G"
 [995] "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T"
[1009] "A" "T" "A" "G" "|"

> dataf
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> find_trunc <- as.character(dataf[t,][[1]])
> find_trunc
[1] "|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|"
> dataf
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> dataf[1,]
transcripts
1 |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
  avg
1 797
> it <- 1
> 			find_trunc <- as.character(dataf[it,][[1]])
> 
> find_trunc
[1] "|AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|"
> maxl <- 0
> 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc[i])) {
+ 				maxl <- nchar(find_trunc[i])
+ 			}
+ 		}
> maxl
[1] 2
> nchar(maxl <- 0
+ 		for (it in 1:nrow(dataf)){
Error: unexpected 'for' in:
"nchar(maxl <- 0
                for"
> 			find_trunc <- as.character(dataf[it,][[1]])
> 			if (maxl < nchar(find_trunc) {
Error: unexpected '{' in "                        if (maxl < nchar(find_trunc) {"
> 				maxl <- nchar(find_trunc)
> 			}
Error: unexpected '}' in "                        }"
> 		})
Error: unexpected '}' in "                }"
> maxl <- 0
> 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc) {
Error: unexpected '{' in:
"                        find_trunc <- as.character(dataf[it,][[1]])
                        if (maxl < nchar(find_trunc) {"
> 				maxl <- nchar(find_trunc)
> 			}
Error: unexpected '}' in "                        }"
> 		}
Error: unexpected '}' in "                }"
> maxl <- 0
> 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc) {
Error: unexpected '{' in:
"                        find_trunc <- as.character(dataf[it,][[1]])
                        if (maxl < nchar(find_trunc) {"
> 				maxl <- nchar(find_trunc)
> 			}
Error: unexpected '}' in "                        }"
> 		}
Error: unexpected '}' in "                }"
> maxl <- 0
> 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
> maxl
[1] 1013
> 1e10
[1] 1e+10
> 1e-10
[1] 1e-10
> log(10)
[1] 2.302585
> (10*log(20 + log(5))/1013)
[1] 0.03033692
> 5^5
[1] 3125
> 5^2
[1] 25
> e
[1] 2
> math.e
Error: object 'math.e' not found
> exp(1)
[1] 2.718282
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0
+ 	fit_tolerance <- 0.0001
+ 	while ((tolerance - lambda * exp(1)^(-lambda*x)) > fit_tolerance) {
+ 		lambda <- lambda + 0.0001
+ 	}
+ 	lambda
+ }
> trunc
function (x, ...)  .Primitive("trunc")
> find_lambda(x=1013, tolerance=10^-10)
[1] 0
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.0001
+ 	fit_tolerance <- 0.0001
+ 	while ((tolerance - lambda * exp(1)^(-lambda*x)) > fit_tolerance) {
+ 		lambda <- lambda + 0.0001
+ 	}
+ 	lambda
+ }
> find_lambda(x=1013, tolerance=10^-10)
[1] 1e-04
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.0001
+ 	}
+ 	lambda
+ }
> find_lambda(x=1013, tolerance=10^-10)
[1] 0.0189
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.0001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.00001
+ 	}
+ 	lambda
+ }
> 
> find_lambda(x=1013, tolerance=10^-10)
[1] 0.01881
> 
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.00001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.000001
+ 	}
+ 	lambda
+ }
> find_lambda(x=1013, tolerance=10^-10)
[1] 0.018808
> reads
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> transcript
 [1] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"                                          
 [2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                                                          
 [3] "ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC"                                                               
 [4] "CCTCAATCGGTCT"                                                                                                                                              
 [5] "TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG"                                                               
 [6] "CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA"                                                                                              
 [7] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                                                                
 [8] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                                                                    
 [9] "CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG"
[10] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"                                                    
[11] "AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC"                                                                                                                        
[12] "CGTCTCAATTGAGAAACC"                                                                                                                                         
[13] "AACAAGGATTCATCGC"                                                                                                                                           
[14] "CGTCCCTCCTC"                                                                                                                                                
[15] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"                                              
> t <- 1
> current_length <- nchar(as.character(dataf[t,][[1]]))
> current_length
[1] 554
> current_length <- nchar(as.character(dataf[2,][[1]]))
> current_length
[1] 716
> current_length <- nchar(as.character(dataf[4,][[1]]))
> current_legnth
Error: object 'current_legnth' not found
> current_length
[1] 1013
> current_length <- nchar(as.character(dataf[t,][[1]]))
> tol <- 1e-10
> lambda=find_lambda(x=current_length, tolerance=tol)
> lambda
[1] 0.03554
> index_vector
 [1]   1 114 195 287 300 392 453 496 551 706 809 844 862 878 889
> nchar(as.character(dataf[3,][[1]]))
[1] 957
> t
[1] 1
> dataf
transcripts
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |AACAAGGATTCATCGC|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CCTCAATCGGTCT|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|
2                                                                                                                                                                                                                                                                                                          |GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|AACAAGGATTCATCGC|CCTCAATCGGTCT|CGTCCCTCCTC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|
3                                                         |CGTCCCTCCTC|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CGTCTCAATTGAGAAACC|ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|AACAAGGATTCATCGC|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|CCTCAATCGGTCT|
4 |ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT|CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA|ACAGATTTGACGACCTTCGGCGGTAGGAAGGATAACCTGCAAACTTGTTAGTGCGGATAGATCACCTGTCTAAGACAACTTCTTTTAGTATC|CCTCAATCGGTCT|TTAAGTCTAACAATCACTGGAGTCGATGAATCGCTGGATCCGATAGAATAACATTGTCATGGTTGGACCCCACCTCACGTGGTCGCTGCGGG|CGTACCAGAATCCATCGCTTGGCGCTGTCGGGTGTTAGCTTTGCCCCACGCAATCGAGGGA|TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT|GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC|CATACGTCTCCCTACGAAAGGCACACCAACGTGATGAGTGAATTTAATACCTGCGTGTGCGATCGCTCCTAACTGGCCTTGATGCTTGCGGGTACAACTGGTCGGGTACTCCAGCATCGTAACTGGGGTCCTGTTCCTACCGTTCTTGAAGTCAG|TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG|AGAGACAGCATGCAGTCTAGTCGAACTTTGCCCCC|CGTCTCAATTGAGAAACC|AACAAGGATTCATCGC|CGTCCCTCCTC|GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG|
  avg
1 797
2 797
3 797
4 797
> current_length <- nchar(as.character(dataf[t,][[1]]))
> 		transcript <- strsplit(as.character(dataf[t,][[1]]),"")
> 		reads <- c()
> 		read_str <- NULL
> 		#parse string
> 		for (base in transcript[[1]]) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}}
Error: unexpected '}' in:
"                        }
                }}"
> current_length <- nchar(as.character(dataf[t,][[1]]))
> 		transcript <- strsplit(as.character(dataf[t,][[1]]),"")
> 		reads <- c()
> 		read_str <- NULL
> 		#parse string
> 		for (base in transcript[[1]]) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}
> current_length
[1] 554
> t
[1] 1
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			#print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chopped_up, length=10)
> 
> transcripts
transcripts
1                                                                                                                                                                                                                                                                                                                                                      |TGTCGTTCCACCGAGACGAGATTCAAGGCGCGGCAGGCAATCACCATAGGTTGCTATGCTGAGGATCTGTGCGCAACAGTCTGATGAGTAACCAGAGATCGTAGGCCATTGGTTGGGAATG|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|TTTATTCTTTACCTT|TTTAACCTTCTTTAATTCGGCAGGAAA|GCTCTATTAACGCCCACAGGAA|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|AGACCCAATTCGTACTGCCTTGGAAATATGGAATCAACTATAAGG|CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|
2 |CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|CTCATGATCGTGTAATTCGGTCTCCTTACACTGGATCTTCCATGCTGCCTAACCGACGACGATAGATGTAAGAAAACTTGGGTTGGACAATGTGGAAATACGTCC|GCCTGCTGATGAACCAAAAGGGTCTGATCCGCGATTCTTACCGAAACGAAATATC|TGTCGTTCCACCGAGACGAGATTCAAGGCGCGGCAGGCAATCACCATAGGTTGCTATGCTGAGGATCTGTGCGCAACAGTCTGATGAGTAACCAGAGATCGTAGGCCATTGGTTGGGAATG|TTTAACCTTCTTTAATTCGGCAGGAAA|TGGCGCTATAGTGAAAACTGGTCAAAACTTAACTGGG|TCTGCCATGCCCTCGCTTACGTACATGTCACCGACTTTTACCCGGCCTGGGAAGTCGTCTTAATATAACGCGAGCTCACCTGGTAAAACGAGGATCGGC|TTTATTCTTTACCTT|GCTCTATTAACGCCCACAGGAA|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|CTGGCGACAGTACGAAATGAAGATAAGTAAATGCCGAGAG|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|AGACCCAATTCGTACTGCCTTGGAAATATGGAATCAACTATAAGG|
3                                                                                                                                                                                                                                                                               |AGACCCAATTCGTACTGCCTTGGAAATATGGAATCAACTATAAGG|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|CTCATGATCGTGTAATTCGGTCTCCTTACACTGGATCTTCCATGCTGCCTAACCGACGACGATAGATGTAAGAAAACTTGGGTTGGACAATGTGGAAATACGTCC|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|GCCGTGTTGAACCCGCACAGACGACCAAGACTTTCCCCAATCGTAGTTCGGAAGCATACCTTAGATAACGCATTCGCTGGCAGTTTGAGGTGCTCGGCC|TTTATTCTTTACCTT|CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|TGGCGCTATAGTGAAAACTGGTCAAAACTTAACTGGG|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|
4                                                                                                                                                                                    |TGTCGTTCCACCGAGACGAGATTCAAGGCGCGGCAGGCAATCACCATAGGTTGCTATGCTGAGGATCTGTGCGCAACAGTCTGATGAGTAACCAGAGATCGTAGGCCATTGGTTGGGAATG|CTCATGATCGTGTAATTCGGTCTCCTTACACTGGATCTTCCATGCTGCCTAACCGACGACGATAGATGTAAGAAAACTTGGGTTGGACAATGTGGAAATACGTCC|TTTAACCTTCTTTAATTCGGCAGGAAA|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|TCTGCCATGCCCTCGCTTACGTACATGTCACCGACTTTTACCCGGCCTGGGAAGTCGTCTTAATATAACGCGAGCTCACCTGGTAAAACGAGGATCGGC|CTGGCGACAGTACGAAATGAAGATAAGTAAATGCCGAGAG|
> transcript
[[1]]
  [1] "|" "A" "A" "C" "A" "A" "G" "G" "A" "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T" "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A" "T" "A" "A"
 [47] "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G" "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G" "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A" "C" "A" "C" "A" "T" "T" "T"
 [93] "A" "C" "T" "C" "G" "G" "A" "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C" "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G" "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G"
[139] "C" "A" "G" "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C" "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T" "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A" "T"
[185] "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T" "C" "G" "T" "C" "G" "G" "|" "C" "C" "T" "C" "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G"
[231] "A" "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C" "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A" "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C" "G" "G" "T"
[277] "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G" "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A" "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A" "T" "A" "G" "T" "G" "G" "T"
[323] "C" "G" "A" "G" "T" "C" "T" "A" "T" "|" "C" "G" "T" "C" "C" "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A" "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G" "C" "T" "T"
[369] "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C" "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A" "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T" "T" "C" "C" "C" "T" "G" "G"
[415] "T" "G" "A" "C" "C" "C" "C" "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G" "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T" "A" "T" "A" "G" "|" "T" "G" "A" "C" "G" "T"
[461] "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C" "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T" "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G" "G" "G" "A" "T" "C" "G" "G"
[507] "C" "C" "A" "T" "C" "G" "G" "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A" "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A" "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C"
[553] "C" "|"

> dataf <- transcripts
> dataf
transcripts
1                                                                                                                                                                                                                                                                                                                                                      |TGTCGTTCCACCGAGACGAGATTCAAGGCGCGGCAGGCAATCACCATAGGTTGCTATGCTGAGGATCTGTGCGCAACAGTCTGATGAGTAACCAGAGATCGTAGGCCATTGGTTGGGAATG|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|TTTATTCTTTACCTT|TTTAACCTTCTTTAATTCGGCAGGAAA|GCTCTATTAACGCCCACAGGAA|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|AGACCCAATTCGTACTGCCTTGGAAATATGGAATCAACTATAAGG|CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|
2 |CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|CTCATGATCGTGTAATTCGGTCTCCTTACACTGGATCTTCCATGCTGCCTAACCGACGACGATAGATGTAAGAAAACTTGGGTTGGACAATGTGGAAATACGTCC|GCCTGCTGATGAACCAAAAGGGTCTGATCCGCGATTCTTACCGAAACGAAATATC|TGTCGTTCCACCGAGACGAGATTCAAGGCGCGGCAGGCAATCACCATAGGTTGCTATGCTGAGGATCTGTGCGCAACAGTCTGATGAGTAACCAGAGATCGTAGGCCATTGGTTGGGAATG|TTTAACCTTCTTTAATTCGGCAGGAAA|TGGCGCTATAGTGAAAACTGGTCAAAACTTAACTGGG|TCTGCCATGCCCTCGCTTACGTACATGTCACCGACTTTTACCCGGCCTGGGAAGTCGTCTTAATATAACGCGAGCTCACCTGGTAAAACGAGGATCGGC|TTTATTCTTTACCTT|GCTCTATTAACGCCCACAGGAA|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|CTGGCGACAGTACGAAATGAAGATAAGTAAATGCCGAGAG|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|AGACCCAATTCGTACTGCCTTGGAAATATGGAATCAACTATAAGG|
3                                                                                                                                                                                                                                                                               |AGACCCAATTCGTACTGCCTTGGAAATATGGAATCAACTATAAGG|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|CTCATGATCGTGTAATTCGGTCTCCTTACACTGGATCTTCCATGCTGCCTAACCGACGACGATAGATGTAAGAAAACTTGGGTTGGACAATGTGGAAATACGTCC|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|GCCGTGTTGAACCCGCACAGACGACCAAGACTTTCCCCAATCGTAGTTCGGAAGCATACCTTAGATAACGCATTCGCTGGCAGTTTGAGGTGCTCGGCC|TTTATTCTTTACCTT|CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|TGGCGCTATAGTGAAAACTGGTCAAAACTTAACTGGG|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|
4                                                                                                                                                                                    |TGTCGTTCCACCGAGACGAGATTCAAGGCGCGGCAGGCAATCACCATAGGTTGCTATGCTGAGGATCTGTGCGCAACAGTCTGATGAGTAACCAGAGATCGTAGGCCATTGGTTGGGAATG|CTCATGATCGTGTAATTCGGTCTCCTTACACTGGATCTTCCATGCTGCCTAACCGACGACGATAGATGTAAGAAAACTTGGGTTGGACAATGTGGAAATACGTCC|TTTAACCTTCTTTAATTCGGCAGGAAA|ACGTTGTTAGCAATCGAAGCGGCCCTATCTCACCTGTGGTTTACCCCGGCGCCGTTATAGAAGTTGTGGTCGAGGACTTAAGTCCGTCAGGATCTTTCGGATCCGTTTTCTGCTTCAGGGCTGCTCTTTTAATAGACTCTATTAGGGGGCACTATAAGCTGTAATAGAG|GCTTAGTATTACTCGGCCCGACGGAATACCCTTTGTGTAGAACGCCTTAGAATACAA|TTTGGTTTATCTGATCCCATGTCAGACGTAGCCACCGCTGCCCGA|CTGGCGTCGTCTTGCTTACTAACCCTATTACGTTGCTCGAGTGGCGCAGTGGAGATTTAAC|TCTGCCATGCCCTCGCTTACGTACATGTCACCGACTTTTACCCGGCCTGGGAAGTCGTCTTAATATAACGCGAGCTCACCTGGTAAAACGAGGATCGGC|CTGGCGACAGTACGAAATGAAGATAAGTAAATGCCGAGAG|
> trunca <- NULL
> if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
> 	lambda <- find_lambda(x=trunca, tolerance=tol)
> lambda
[1] 0.020989
> t <- 1
> 	current_length <- nchar(as.character(dataf[t,][[1]]))
> current_length
[1] 572
> trunca
[1] 913
> lambda
[1] 0.020989
> exponential_dist <- function(
+ 	x = NULL,
+ 	lambda = NULL) {
+ 
+ 	ret <- lambda * exp(1)^(-lambda*x)
+ 	ret
+ }
> exponential_dist(300, lambda)
[1] 3.86696e-05
> exponential_dist(30, lambda)
[1] 0.01118226
> index_vector
 [1]   1 114 195 287 300 392 453 496 551 706 809 844 862 878 889
> 	index_vector <- c(0)
> 	curr <- 1
> 	for (i in 1:(length(transcript) - 1)) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
> index_vector
[1]    0 2777
> transcript
[[1]]
  [1] "|" "A" "A" "C" "A" "A" "G" "G" "A" "T" "T" "C" "A" "T" "C" "G" "C" "|" "C" "A" "A" "A" "C" "C" "T" "A" "A" "T" "T" "C" "C" "A" "G" "G" "A" "C" "C" "A" "T" "G" "T" "G" "A" "T" "A" "A"
 [47] "A" "T" "T" "A" "C" "A" "A" "T" "G" "C" "G" "G" "A" "C" "G" "T" "A" "A" "C" "G" "G" "C" "G" "C" "G" "T" "G" "A" "C" "T" "C" "G" "C" "C" "T" "C" "T" "G" "A" "C" "A" "C" "A" "T" "T" "T"
 [93] "A" "C" "T" "C" "G" "G" "A" "|" "T" "T" "T" "T" "T" "G" "G" "A" "G" "G" "A" "A" "C" "A" "A" "T" "C" "T" "T" "A" "G" "A" "C" "A" "C" "A" "G" "T" "G" "T" "A" "G" "C" "C" "G" "C" "G" "G"
[139] "C" "A" "G" "A" "G" "G" "A" "A" "T" "G" "G" "A" "T" "G" "C" "G" "C" "A" "T" "A" "C" "T" "T" "A" "T" "C" "C" "C" "C" "C" "T" "A" "G" "A" "A" "C" "A" "G" "A" "C" "T" "C" "T" "C" "A" "T"
[185] "G" "T" "C" "G" "T" "C" "C" "G" "C" "C" "C" "T" "T" "C" "G" "T" "C" "G" "G" "|" "C" "C" "T" "C" "A" "A" "T" "C" "G" "G" "T" "C" "T" "|" "A" "T" "T" "T" "C" "T" "T" "C" "A" "G" "A" "G"
[231] "A" "T" "T" "A" "C" "C" "T" "G" "T" "T" "A" "G" "A" "C" "C" "G" "A" "A" "C" "A" "G" "G" "C" "G" "G" "G" "G" "C" "A" "T" "T" "C" "C" "T" "T" "A" "C" "T" "C" "G" "G" "C" "C" "G" "G" "T"
[277] "T" "T" "G" "C" "G" "A" "C" "G" "A" "A" "G" "G" "T" "G" "A" "C" "T" "A" "A" "G" "C" "T" "G" "C" "A" "A" "T" "G" "T" "G" "A" "T" "G" "C" "C" "A" "A" "C" "A" "T" "A" "G" "T" "G" "G" "T"
[323] "C" "G" "A" "G" "T" "C" "T" "A" "T" "|" "C" "G" "T" "C" "C" "C" "T" "C" "C" "T" "C" "|" "G" "G" "C" "T" "A" "G" "A" "G" "A" "G" "G" "C" "C" "G" "A" "A" "T" "A" "A" "T" "G" "C" "T" "T"
[369] "G" "A" "C" "A" "C" "A" "G" "C" "C" "C" "C" "G" "A" "G" "C" "C" "T" "G" "C" "G" "C" "A" "A" "A" "A" "G" "A" "T" "G" "C" "G" "G" "T" "C" "T" "A" "A" "G" "T" "T" "C" "C" "C" "T" "G" "G"
[415] "T" "G" "A" "C" "C" "C" "C" "C" "A" "C" "A" "G" "T" "G" "T" "G" "T" "T" "A" "T" "G" "T" "C" "G" "T" "A" "G" "G" "C" "G" "A" "T" "C" "T" "T" "A" "T" "A" "G" "|" "T" "G" "A" "C" "G" "T"
[461] "C" "C" "A" "C" "C" "A" "T" "A" "C" "C" "C" "G" "G" "C" "C" "G" "T" "A" "C" "A" "T" "A" "C" "G" "T" "T" "T" "T" "T" "C" "T" "C" "A" "A" "C" "T" "T" "|" "G" "G" "G" "A" "T" "C" "G" "G"
[507] "C" "C" "A" "T" "C" "G" "G" "T" "G" "T" "G" "C" "G" "C" "C" "C" "T" "A" "G" "A" "A" "T" "T" "T" "T" "C" "A" "A" "A" "G" "T" "T" "C" "T" "A" "A" "C" "T" "G" "T" "T" "T" "A" "A" "A" "C"
[553] "C" "|"

> reads
[1] "AACAAGGATTCATCGC"                                                                                                 
[2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                
[3] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"          
[4] "CCTCAATCGGTCT"                                                                                                    
[5] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"
[6] "CGTCCCTCCTC"                                                                                                      
[7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"    
[8] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                      
[9] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                          
> current_length
[1] 572
> transcript <- reads
> transcript
[1] "AACAAGGATTCATCGC"                                                                                                 
[2] "CAAACCTAATTCCAGGACCATGTGATAAATTACAATGCGGACGTAACGGCGCGTGACTCGCCTCTGACACATTTACTCGGA"                                
[3] "TTTTTGGAGGAACAATCTTAGACACAGTGTAGCCGCGGCAGAGGAATGGATGCGCATACTTATCCCCCTAGAACAGACTCTCATGTCGTCCGCCCTTCGTCGG"          
[4] "CCTCAATCGGTCT"                                                                                                    
[5] "ATTTCTTCAGAGATTACCTGTTAGACCGAACAGGCGGGGCATTCCTTACTCGGCCGGTTTGCGACGAAGGTGACTAAGCTGCAATGTGATGCCAACATAGTGGTCGAGTCTAT"
[6] "CGTCCCTCCTC"                                                                                                      
[7] "GGCTAGAGAGGCCGAATAATGCTTGACACAGCCCCGAGCCTGCGCAAAAGATGCGGTCTAAGTTCCCTGGTGACCCCCACAGTGTGTTATGTCGTAGGCGATCTTATAG"    
[8] "TGACGTCCACCATACCCGGCCGTACATACGTTTTTCTCAACTT"                                                                      
[9] "GGGATCGGCCATCGGTGTGCGCCCTAGAATTTTCAAAGTTCTAACTGTTTAAACC"                                                          
> index_vector <- c(0)
> 	curr <- 1
> 	for (i in 1:(length(transcript) - 1)) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
> index_vector
[1]   0  17  98 201 214 327 338 447 490
> nchar("AACAAGGATTCATCGC")
[1] 16
> current_length
[1] 572
> index_vector <- c(0)
> 	curr <- 1
> 	for (i in 1:(length(transcript))) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
> index_vector
 [1]   0  17  98 201 214 327 338 447 490 545
> length(transcript)
[1] 9
> 	y_vector <- c()
> 	for (y in 1:(length(transcript) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
> 
> y_vector
[1] 1.755945e-02 6.278499e-03 9.104129e-04 2.694913e-04 7.182476e-05 1.954875e-05 5.548742e-06 1.125702e-06
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.2.4 
> index_vector(c[1,length(index_vector)])
Error: could not find function "index_vector"
> index_vector[c(1,length(index_vector))]
[1]   0 545
> index_vector
 [1]   0  17  98 201 214 327 338 447 490 545
> head(index_vector)
[1]   0  17  98 201 214 327
> index_vector[c(1:length(index_vector))]
 [1]   0  17  98 201 214 327 338 447 490 545
> index_vector[c(2:length(index_vector))]
[1]  17  98 201 214 327 338 447 490 545
> index_vector <- c(0, index_vector)
> index_vector
 [1]   0   0  17  98 201 214 327 338 447 490 545
> index_vector[c(2:length(index_vector))]
 [1]   0  17  98 201 214 327 338 447 490 545
> index_vector <- index_vector[c(2:length(index_vector))]
> qplot(probabilities, data = y_vector, geom="histogram")
Error: ggplot2 doesn't know how to deal with data of class numeric
> dat <- data.frame(val=y_vector)
> dat
           val
1 1.755945e-02
2 6.278499e-03
3 9.104129e-04
4 2.694913e-04
5 7.182476e-05
6 1.954875e-05
7 5.548742e-06
8 1.125702e-06
> qplot(probabilities, data = dat, geom="histogram")
Error in eval(expr, envir, enclos) : object 'probabilities' not found
> qplot(val, data = dat, geom="histogram")
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> val
Error: object 'val' not found
> set.seed(5689)
> movies <- movies[sample(nrow(movies), 1000), ]
Error: object 'movies' not found
> # Simple examples
> qplot(rating, data=movies, geom="histogram")
Error in ggplot(data, aesthetics, environment = env) : 
  object 'movies' not found
> dat <- data.frame(x = index_vector, y = y_vector)
Error in data.frame(x = index_vector, y = y_vector) : 
  arguments imply differing number of rows: 10, 8
> dat
           val
1 1.755945e-02
2 6.278499e-03
3 9.104129e-04
4 2.694913e-04
5 7.182476e-05
6 1.954875e-05
7 5.548742e-06
8 1.125702e-06
> y_vector
[1] 1.755945e-02 6.278499e-03 9.104129e-04 2.694913e-04 7.182476e-05 1.954875e-05 5.548742e-06 1.125702e-06
> index_vector
 [1]   0  17  98 201 214 327 338 447 490 545
> length(y_vector)
[1] 8
> length(index_vector)
[1] 10
> y_vector
[1] 1.755945e-02 6.278499e-03 9.104129e-04 2.694913e-04 7.182476e-05 1.954875e-05 5.548742e-06 1.125702e-06
> index_veector
Error: object 'index_veector' not found
> index_vector
 [1]   0  17  98 201 214 327 338 447 490 545
> y_vector
[1] 1.755945e-02 6.278499e-03 9.104129e-04 2.694913e-04 7.182476e-05 1.954875e-05 5.548742e-06 1.125702e-06
> 	x_vector <- c()
> 	for (x in 1:(length(index_vector) - 1)) {
+ 		x_vector <- c(x_vector, (index_vector[x + 1] - index_vector[x]))
+ 	}
> x_vector
[1]  17  81 103  13 113  11 109  43  55
> length(x_vector)
[1] 9
> index_vector
 [1]   0  17  98 201 214 327 338 447 490 545
> 	y_vector <- c()
> 	for (y in 1:(length(index_vector) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
> y_vector
[1] 1.755945e-02 6.278499e-03 9.104129e-04 2.694913e-04 7.182476e-05 1.954875e-05 5.548742e-06 1.125702e-06 4.025026e-07
> 	dat <- data.frame(x=x_vector, y=y_vector)	
> 
> dat
    x            y
1  17 1.755945e-02
2  81 6.278499e-03
3 103 9.104129e-04
4  13 2.694913e-04
5 113 7.182476e-05
6  11 1.954875e-05
7 109 5.548742e-06
8  43 1.125702e-06
9  55 4.025026e-07
> 
> barplot(y_vector, x_vector, space=0)
> barplot(y_vector, x_vector, space=0)
> 
> generate_string <- function(
+ 	length = NULL) {
+ 
+ 	randomString <- c()
+ 	for (i in 1:length) {
+ 		appchar <- sample(c("A", "T", "C", "G"), 1, replace=FALSE)
+ 		randomString <- paste(randomString, appchar, sep = "")
+ 	}
+ 	randomString
+ }
> 
> #randomly cut up string
> #put into dataframe
> #random generate index number 1-cuts
> #piece back strings together
> create_cuts <- function(
+ 	operating_str = NULL,
+ 	filterby = NULL,
+ 	filter = FALSE,
+ 	cuts = NULL) {
+ 
+ 	if (is.null(cuts)) {
+ 		cuts <- 1000
+ 	}
+ 	if (is.null(operating_str)) {
+ 		operating_str <- generate_string(300000)
+ 	}
+ 	if (is.null(filterby)) {
+ 		filterby <- 100
+ 	}
+ 	i <- 1;
+ 	cuts_vector <- c()
+ 	while (operating_str != "" && i <= cuts) {
+ 		start <- as.integer(sample(0:i, 1) + 1)
+ 		end <- as.integer(sample((10:20) * start, 1))
+ 		cut <- substr(operating_str, start, end)
+ 		cuts_vector <- c(cuts_vector, cut)
+ 		operating_str <- gsub(cut, "", operating_str)
+ 		i <- i + 1
+ 	}
+ 	#filter 
+ 	if (filter) {
+ 		actual_cuts <- mapply(function(x) { if (nchar(x) >= filterby) return (TRUE) else return (FALSE) }, cuts_vector)
+ 		cuts_vector <- cuts_vector[actual_cuts == TRUE]
+ 	}
+ 	cuts_df <- data.frame(cuts = cuts_vector, stringsAsFactors = FALSE)
+ 	cuts_df
+ }
> 
> #return a dataframe of transcripts
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			#print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> #plot transcripts as a function of y = e^-x and 
> #use | as delminator
> #use nchar as count
> #assumptions 
> #truncated @ q3, make length fit at q3 to make a discernable difference
> 
> plot_transcripts <- function(
+ 	dataf = NULL,
+ 	trunca = NULL, 
+ 	lambda = NULL) {
+ 
+ 	tol <- 1e-10
+ 
+ 	if (is.null(lambda)) {
+ 		lambda <- 1
+ 	}
+ 
+ 	#this is to find the truncation point for non fitted distribution
+ 	if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
+ 	lambda <- find_lambda(x=trunca, tolerance=tol)
+ 
+ 	for (t in 1:nrow(dataf)) {
+ 		#iterate through all transcripts
+ 		current_length <- nchar(as.character(dataf[t,][[1]]))
+ 		transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 		reads <- c()
+ 		read_str <- NULL
+ 		#parse string
+ 		for (base in transcript[[1]]) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=lambda)
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=find_lambda(x=current_length, tolerance=tol))
+ 	}
+ }
> 
> plots <- function(
+ 	transcript = NULL,
+ 	distribution_type = NULL,
+ 	lambda = NULL) {
+ 
+ 	p <- NULL
+ 	#construct indexes given frames | lmaomlmao remember freaking R indexes at 1
+ 	index_vector <- c(0)
+ 	curr <- 1
+ 	for (i in 1:(length(transcript))) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
+ 	#generate x axis
+ 	x_vector <- c()
+ 	for (x in 1:(length(index_vector) - 1)) {
+ 		x_vector <- c(x_vector, (index_vector[x + 1] - index_vector[x]))
+ 	}
+ 	#generate y axis
+ 	y_vector <- c()
+ 	for (y in 1:(length(index_vector) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
+ 	p <- barplot(y_vector, x_vector, space = 0)
+ }
> 
> exponential_dist <- function(
+ 	x = NULL,
+ 	lambda = NULL) {
+ 
+ 	ret <- lambda * exp(1)^(-lambda*x)
+ 	ret
+ }
> 
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.00001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.000001
+ 	}
+ 	lambda
+ }
> 
> opstr <- generate_string(1000)

> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chop_df=chopped_up, transcript_number=4, length=10, variation=TRUE)
> plot_transcripts(dataf=transcripts)
> 
> 
> 
> 
> 
> transcripts
transcripts
1 |ATTTAAACACGGTAGGGTTACACTGACGATTACCATAGAGTCAATCGAT|CTAGCGTCCCCGGGTATGT|GGGGGGTAGAGGAGTTCGCGCAGAAGGTTCACCCGTCCCCTTAAATGGGTTGCAGGTGTAGGAACCTATTACCCGCAACAATAATTATGCCGAAATTGCGGACCAAGCTACCTTCCTAGAGGATTAGAAGGCGTTAATAGTTCTTGGTGTCTAGAGAAAGTCACGTCTCAAAAGTGA|GAGTCTTCACAGGTCTGGGTACCAAGACGTCGTGA|CCATAACCCGGGCAAAGTCGTTAGCCACAGACTGATAATCTTGCGGGCGGGTAGCAAACACAGCGTATACGCAATAC|ACGGGCGCATAG|||TCGTTCGTTAAATGACTCTTATATTGGTGATCGGCAATCG|TGATGGAGCAGCAATCGATCTACGAAAGGCAATGCACTTGTACTCAATTCCCGCGGCTTTCCCCAAGGATCCACAGTATTGAATGAGTAGCTGTCTTGGTACAAGTTCCCCGTCGTCCCTGCTTGGGTAGTCGGCCGCCCAAATTCACCAGTGTGTTTTTC|AAATCCCGAAGATAAGTGCCGTTTGAGAGTGATCATCCAATCGGG|TGGGCGGCGAGGGATGGCCTGTACGTGAATGGCTAGACTGCGCCTCTCTACGGCC|AGGGCTCGCATTTAAGTGCTGCTTCATTATTGTTATTGGTCCCGCGAATGGAGGAAATCACGGAGCAGTTGATCTAACCATATGCGGCCACTTTGGCGCCGTTTCGCATGCGCTGAGGACTTTGCGGGCATCCGACGGATCGAAGGGACCGACCTTCGTACGCTCACAGTAAACGGG|CACCGTTGCTCATTAGGCGATTCTTCTATGGGGGTAGTGCGGTGTCCCTCCGTTAGGGCTGCAATTACGTTAGAGG|GCATGTCTAAGGGGCGTTCACATGCAAAGAATGACGACCGCGTGATGGCTACGTGACTAAGGGCGATAC|
2                                                                                                     |TCGTTCGTTAAATGACTCTTATATTGGTGATCGGCAATCG|GGGGGGTAGAGGAGTTCGCGCAGAAGGTTCACCCGTCCCCTTAAATGGGTTGCAGGTGTAGGAACCTATTACCCGCAACAATAATTATGCCGAAATTGCGGACCAAGCTACCTTCCTAGAGGATTAGAAGGCGTTAATAGTTCTTGGTGTCTAGAGAAAGTCACGTCTCAAAAGTGA|GAGTCTTCACAGGTCTGGGTACCAAGACGTCGTGA|ATTTAAACACGGTAGGGTTACACTGACGATTACCATAGAGTCAATCGAT|AGGGCTCGCATTTAAGTGCTGCTTCATTATTGTTATTGGTCCCGCGAATGGAGGAAATCACGGAGCAGTTGATCTAACCATATGCGGCCACTTTGGCGCCGTTTCGCATGCGCTGAGGACTTTGCGGGCATCCGACGGATCGAAGGGACCGACCTTCGTACGCTCACAGTAAACGGG|ACGGGCGCATAG|CACCGTTGCTCATTAGGCGATTCTTCTATGGGGGTAGTGCGGTGTCCCTCCGTTAGGGCTGCAATTACGTTAGAGG|TGATGGAGCAGCAATCGATCTACGAAAGGCAATGCACTTGTACTCAATTCCCGCGGCTTTCCCCAAGGATCCACAGTATTGAATGAGTAGCTGTCTTGGTACAAGTTCCCCGTCGTCCCTGCTTGGGTAGTCGGCCGCCCAAATTCACCAGTGTGTTTTTC|GCATGTCTAAGGGGCGTTCACATGCAAAGAATGACGACCGCGTGATGGCTACGTGACTAAGGGCGATAC|AAATCCCGAAGATAAGTGCCGTTTGAGAGTGATCATCCAATCGGG|TGGGCGGCGAGGGATGGCCTGTACGTGAATGGCTAGACTGCGCCTCTCTACGGCC|
3 |GAGTCTTCACAGGTCTGGGTACCAAGACGTCGTGA||ACGGGCGCATAG|TGATGGAGCAGCAATCGATCTACGAAAGGCAATGCACTTGTACTCAATTCCCGCGGCTTTCCCCAAGGATCCACAGTATTGAATGAGTAGCTGTCTTGGTACAAGTTCCCCGTCGTCCCTGCTTGGGTAGTCGGCCGCCCAAATTCACCAGTGTGTTTTTC|CTAGCGTCCCCGGGTATGT|ATTTAAACACGGTAGGGTTACACTGACGATTACCATAGAGTCAATCGAT|CCATAACCCGGGCAAAGTCGTTAGCCACAGACTGATAATCTTGCGGGCGGGTAGCAAACACAGCGTATACGCAATAC|CACCGTTGCTCATTAGGCGATTCTTCTATGGGGGTAGTGCGGTGTCCCTCCGTTAGGGCTGCAATTACGTTAGAGG|AGGGCTCGCATTTAAGTGCTGCTTCATTATTGTTATTGGTCCCGCGAATGGAGGAAATCACGGAGCAGTTGATCTAACCATATGCGGCCACTTTGGCGCCGTTTCGCATGCGCTGAGGACTTTGCGGGCATCCGACGGATCGAAGGGACCGACCTTCGTACGCTCACAGTAAACGGG|GCATGTCTAAGGGGCGTTCACATGCAAAGAATGACGACCGCGTGATGGCTACGTGACTAAGGGCGATAC|TGGGCGGCGAGGGATGGCCTGTACGTGAATGGCTAGACTGCGCCTCTCTACGGCC|AAATCCCGAAGATAAGTGCCGTTTGAGAGTGATCATCCAATCGGG||TCGTTCGTTAAATGACTCTTATATTGGTGATCGGCAATCG|GGGGGGTAGAGGAGTTCGCGCAGAAGGTTCACCCGTCCCCTTAAATGGGTTGCAGGTGTAGGAACCTATTACCCGCAACAATAATTATGCCGAAATTGCGGACCAAGCTACCTTCCTAGAGGATTAGAAGGCGTTAATAGTTCTTGGTGTCTAGAGAAAGTCACGTCTCAAAAGTGA|
4                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |ATTTAAACACGGTAGGGTTACACTGACGATTACCATAGAGTCAATCGAT|AGGGCTCGCATTTAAGTGCTGCTTCATTATTGTTATTGGTCCCGCGAATGGAGGAAATCACGGAGCAGTTGATCTAACCATATGCGGCCACTTTGGCGCCGTTTCGCATGCGCTGAGGACTTTGCGGGCATCCGACGGATCGAAGGGACCGACCTTCGTACGCTCACAGTAAACGGG|CTAGCGTCCCCGGGTATGT|TGGGCGGCGAGGGATGGCCTGTACGTGAATGGCTAGACTGCGCCTCTCTACGGCC|TCGTTCGTTAAATGACTCTTATATTGGTGATCGGCAATCG|AAATCCCGAAGATAAGTGCCGTTTGAGAGTGATCATCCAATCGGG||TGATGGAGCAGCAATCGATCTACGAAAGGCAATGCACTTGTACTCAATTCCCGCGGCTTTCCCCAAGGATCCACAGTATTGAATGAGTAGCTGTCTTGGTACAAGTTCCCCGTCGTCCCTGCTTGGGTAGTCGGCCGCCCAAATTCACCAGTGTGTTTTTC|
> dataf<-transcripts
> tol <- 1e-10
> 
> 	if (is.null(lambda)) {
+ 		lambda <- 1
+ 	}
> 
> 	#this is to find the truncation point for non fitted distribution
> 	if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
> 	lambda <- find_lambda(x=trunca, tolerance=tol)
> 
> 	for (t in 1:nrow(dataf)) {
+ 		#iterate through all transcripts
+ 		current_length <- nchar(as.character(dataf[t,][[1]]))
+ 		transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 		reads <- c()
+ 		read_str <- NULL
+ 		#parse string
+ 		for (base in transcript[[1]]) {
+ 			if (base != "|") {
+ 				read_str <- paste(read_str, base, sep="")
+ 			} else {
+ 				reads <- c(reads, read_str)
+ 				read_str <- NULL
+ 			}
+ 		}
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=lambda)
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=find_lambda(x=current_length, tolerance=tol))
+ 	}
> }
Error: unexpected '}' in "}"
> 
> plots <- function(
+ 	transcript = NULL,
+ 	distribution_type = NULL,
+ 	lambda = NULL) {
+ 
+ 	p <- NULL
+ 	#construct indexes given frames | lmaomlmao remember freaking R indexes at 1
+ 	index_vector <- c(0)
+ 	curr <- 1
+ 	for (i in 1:(length(transcript))) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
+ 	#generate x axis
+ 	x_vector <- c()
+ 	for (x in 1:(length(index_vector) - 1)) {
+ 		x_vector <- c(x_vector, (index_vector[x + 1] - index_vector[x]))
+ 	}
+ 	#generate y axis
+ 	y_vector <- c()
+ 	for (y in 1:(length(index_vector) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
+ 	p <- barplot(y_vector, x_vector, space = 0)
+ # install.packages("ggplot2")
+ # install.packages("gplots")
+ # install.packages("Matrix")
+ # library("Matrix")
+ # library("ggplot2")
+ # library("gplots")
+ 
+ generate_string <- function(
+ 	length = NULL) {
+ 
+ 	randomString <- c()
+ 	for (i in 1:length) {
+ 		appchar <- sample(c("A", "T", "C", "G"), 1, replace=FALSE)
+ 		randomString <- paste(randomString, appchar, sep = "")
+ 	}
+ 	randomString
+ }
+ 
+ #randomly cut up string
+ #put into dataframe
+ #random generate index number 1-cuts
+ #piece back strings together
+ create_cuts <- function(
+ 	operating_str = NULL,
+ 	filterby = NULL,
+ 	filter = FALSE,
+ 	cuts = NULL) {
+ 
+ 	if (is.null(cuts)) {
+ 		cuts <- 1000
+ 	}
+ 	if (is.null(operating_str)) {
+ 		operating_str <- generate_string(300000)
+ 	}
+ 	if (is.null(filterby)) {
+ 		filterby <- 100
+ 	}
+ 	i <- 1;
+ 	cuts_vector <- c()
+ 	while (operating_str != "" && i <= cuts) {
+ 		start <- as.integer(sample(0:i, 1) + 1)
+ 		end <- as.integer(sample((10:20) * start, 1))
+ 		cut <- substr(operating_str, start, end)
+ 		cuts_vector <- c(cuts_vector, cut)
+ 		operating_str <- gsub(cut, "", operating_str)
+ 		i <- i + 1
+ 	}
+ 	#filter 
+ 	if (filter) {
+ 		actual_cuts <- mapply(function(x) { if (nchar(x) >= filterby) return (TRUE) else return (FALSE) }, cuts_vector)
+ 		cuts_vector <- cuts_vector[actual_cuts == TRUE]
+ 	}
+ 	cuts_df <- data.frame(cuts = cuts_vector, stringsAsFactors = FALSE)
+ 	cuts_df
+ }
+ 
+ #return a dataframe of transcripts
+ create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			#print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
+ 
+ #plot transcripts as a function of y = e^-x and 
+ #use | as delminator
+ #use nchar as count
+ #assumptions 
+ #truncated @ q3, make length fit at q3 to make a discernable difference
+ 
+ plot_transcripts <- function(
+ 	dataf = NULL,
+ 	trunca = NULL, 
+ 	lambda = NULL,
+ 	dist_type = NULL,
+ 	t = NULL) {
+ 
+ 	tol <- 1e-10
+ 
+ 	if (is.null(lambda)) {
+ 		lambda <- 1
+ 	}
+ 
+ 	#this is to find the truncation point for non fitted distribution
+ 	if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
+ 	lambda <- find_lambda(x=trunca, tolerance=tol)
+ 
+ 	#iterate through all transcripts
+ 	current_length <- nchar(as.character(dataf[t,][[1]]))
+ 	transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 	reads <- c()
+ 	read_str <- NULL
+ 	#parse string
+ 	for (base in transcript[[1]]) {
+ 		if (base != "|") {
+ 			read_str <- paste(read_str, base, sep="")
+ 		} else {
+ 			reads <- c(reads, read_str)
+ 			read_str <- NULL
+ 		}
+ 	}
+ 	if (dist_type == 0) {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=lambda)
+ 	} else {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=find_lambda(x=current_length, tolerance=tol))
+ 	}	
+ }
+ 
+ plots <- function(
+ 	transcript = NULL,
+ 	distribution_type = NULL,
+ 	lambda = NULL) {
+ 
+ 	p <- NULL
+ 	#construct indexes given frames | lmaomlmao remember freaking R indexes at 1
+ 	index_vector <- c(0)
+ 	curr <- 1
+ 	for (i in 1:(length(transcript))) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
+ 	#generate x axis
+ 	x_vector <- c()
+ 	for (x in 1:(length(index_vector) - 1)) {
+ 		x_vector <- c(x_vector, (index_vector[x + 1] - index_vector[x]))
+ 	}
+ 	#generate y axis
+ 	y_vector <- c()
+ 	for (y in 1:(length(index_vector) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
+ 	p <- barplot(y_vector, x_vector, space = 0)
+ }
+ 
+ exponential_dist <- function(
+ 	x = NULL,
+ 	lambda = NULL) {
+ 
+ 	ret <- lambda * exp(1)^(-lambda*x)
+ 	ret
+ }
+ 
+ find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.00001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.000001
+ 	}
+ 	lambda
+ }
+ 
+ opstr <- generate_string(1000)
+ chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
+ transcripts <- create_transcripts(chop_df=chopped_up, transcript_number=4, length=10, variation=TRUE)
+ plot_transcripts(dataf=transcripts, t=1, dist_type=0)
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
> 
> 
> 
> generate_string <- function(
+ 	length = NULL) {
+ 
+ 	randomString <- c()
+ 	for (i in 1:length) {
+ 		appchar <- sample(c("A", "T", "C", "G"), 1, replace=FALSE)
+ 		randomString <- paste(randomString, appchar, sep = "")
+ 	}
+ 	randomString
+ }
> 
> #randomly cut up string
> #put into dataframe
> #random generate index number 1-cuts
> #piece back strings together
> create_cuts <- function(
+ 	operating_str = NULL,
+ 	filterby = NULL,
+ 	filter = FALSE,
+ 	cuts = NULL) {
+ 
+ 	if (is.null(cuts)) {
+ 		cuts <- 1000
+ 	}
+ 	if (is.null(operating_str)) {
+ 		operating_str <- generate_string(300000)
+ 	}
+ 	if (is.null(filterby)) {
+ 		filterby <- 100
+ 	}
+ 	i <- 1;
+ 	cuts_vector <- c()
+ 	while (operating_str != "" && i <= cuts) {
+ 		start <- as.integer(sample(0:i, 1) + 1)
+ 		end <- as.integer(sample((10:20) * start, 1))
+ 		cut <- substr(operating_str, start, end)
+ 		cuts_vector <- c(cuts_vector, cut)
+ 		operating_str <- gsub(cut, "", operating_str)
+ 		i <- i + 1
+ 	}
+ 	#filter 
+ 	if (filter) {
+ 		actual_cuts <- mapply(function(x) { if (nchar(x) >= filterby) return (TRUE) else return (FALSE) }, cuts_vector)
+ 		cuts_vector <- cuts_vector[actual_cuts == TRUE]
+ 	}
+ 	cuts_df <- data.frame(cuts = cuts_vector, stringsAsFactors = FALSE)
+ 	cuts_df
+ }
> 
> #return a dataframe of transcripts
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			#print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> plot_transcripts <- function(
+ 	dataf = NULL,
+ 	trunca = NULL, 
+ 	lambda = NULL,
+ 	dist_type = NULL,
+ 	t = NULL) {
+ 
+ 	tol <- 1e-10
+ 
+ 	if (is.null(lambda)) {
+ 		lambda <- 1
+ 	}
+ 
+ 	#this is to find the truncation point for non fitted distribution
+ 	if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
+ 	lambda <- find_lambda(x=trunca, tolerance=tol)
+ 
+ 	#iterate through all transcripts
+ 	current_length <- nchar(as.character(dataf[t,][[1]]))
+ 	transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 	reads <- c()
+ 	read_str <- NULL
+ 	#parse string
+ 	for (base in transcript[[1]]) {
+ 		if (base != "|") {
+ 			read_str <- paste(read_str, base, sep="")
+ 		} else {
+ 			reads <- c(reads, read_str)
+ 			read_str <- NULL
+ 		}
+ 	}
+ 	if (dist_type == 0) {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=lambda)
+ 	} else {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=find_lambda(x=current_length, tolerance=tol))
+ 	}	
+ }
> 
> 
> plots <- function(
+ 	transcript = NULL,
+ 	distribution_type = NULL,
+ 	lambda = NULL) {
+ 
+ 	p <- NULL
+ 	#construct indexes given frames | lmaomlmao remember freaking R indexes at 1
+ 	index_vector <- c(0)
+ 	curr <- 1
+ 	for (i in 1:(length(transcript))) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
+ 	#generate x axis
+ 	x_vector <- c()
+ 	for (x in 1:(length(index_vector) - 1)) {
+ 		x_vector <- c(x_vector, (index_vector[x + 1] - index_vector[x]))
+ 	}
+ 	#generate y axis
+ 	y_vector <- c()
+ 	for (y in 1:(length(index_vector) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
+ 	p <- barplot(y_vector, x_vector, space = 0)
+ }
> 
> exponential_dist <- function(
+ 	x = NULL,
+ 	lambda = NULL) {
+ 
+ 	ret <- lambda * exp(1)^(-lambda*x)
+ 	ret
+ }
> 
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.00001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.000001
+ 	}
+ 	lambda
+ }
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chop_df=chopped_up, transcript_number=4, length=10, variation=TRUE)
> plot_transcripts(dataf=transcripts, t=1, dist_type=0)
> 
> 
> plot_transcripts(dataf=transcripts, t=1, dist_type=1)
> # install.packages("ggplot2")
> # install.packages("gplots")
> # install.packages("Matrix")
> # library("Matrix")
> # library("ggplot2")
> # library("gplots")
> 
> generate_string <- function(
+ 	length = NULL) {
+ 
+ 	randomString <- c()
+ 	for (i in 1:length) {
+ 		appchar <- sample(c("A", "T", "C", "G"), 1, replace=FALSE)
+ 		randomString <- paste(randomString, appchar, sep = "")
+ 	}
+ 	randomString
+ }
> 
> #randomly cut up string
> #put into dataframe
> #random generate index number 1-cuts
> #piece back strings together
> create_cuts <- function(
+ 	operating_str = NULL,
+ 	filterby = NULL,
+ 	filter = FALSE,
+ 	cuts = NULL) {
+ 
+ 	if (is.null(cuts)) {
+ 		cuts <- 1000
+ 	}
+ 	if (is.null(operating_str)) {
+ 		operating_str <- generate_string(300000)
+ 	}
+ 	if (is.null(filterby)) {
+ 		filterby <- 100
+ 	}
+ 	i <- 1;
+ 	cuts_vector <- c()
+ 	while (operating_str != "" && i <= cuts) {
+ 		start <- as.integer(sample(0:i, 1) + 1)
+ 		end <- as.integer(sample((10:20) * start, 1))
+ 		cut <- substr(operating_str, start, end)
+ 		cuts_vector <- c(cuts_vector, cut)
+ 		operating_str <- gsub(cut, "", operating_str)
+ 		i <- i + 1
+ 	}
+ 	#filter 
+ 	if (filter) {
+ 		actual_cuts <- mapply(function(x) { if (nchar(x) >= filterby) return (TRUE) else return (FALSE) }, cuts_vector)
+ 		cuts_vector <- cuts_vector[actual_cuts == TRUE]
+ 	}
+ 	cuts_df <- data.frame(cuts = cuts_vector, stringsAsFactors = FALSE)
+ 	cuts_df
+ }
> 
> #return a dataframe of transcripts
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			#print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> #plot transcripts as a function of y = e^-x and 
> #use | as delminator
> #use nchar as count
> #assumptions 
> #truncated @ q3, make length fit at q3 to make a discernable difference
> 
> plot_transcripts <- function(
+ 	dataf = NULL,
+ 	trunca = NULL, 
+ 	lambda = NULL,
+ 	dist_type = NULL,
+ 	t = NULL) {
+ 
+ 	tol <- 1e-10
+ 
+ 	if (is.null(lambda)) {
+ 		lambda <- 1
+ 	}
+ 
+ 	#this is to find the truncation point for non fitted distribution
+ 	if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
+ 	lambda <- find_lambda(x=trunca, tolerance=tol)
+ 
+ 	#iterate through all transcripts
+ 	current_length <- nchar(as.character(dataf[t,][[1]]))
+ 	transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 	reads <- c()
+ 	read_str <- NULL
+ 	#parse string
+ 	for (base in transcript[[1]]) {
+ 		if (base != "|") {
+ 			read_str <- paste(read_str, base, sep="")
+ 		} else {
+ 			reads <- c(reads, read_str)
+ 			read_str <- NULL
+ 		}
+ 	}
+ 	if (dist_type == 0) {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=lambda)
+ 	} else {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=find_lambda(x=current_length, tolerance=tol))
+ 	}	
+ }
> 
> plots <- function(
+ 	transcript = NULL,
+ 	distribution_type = NULL,
+ 	lambda = NULL) {
+ 
+ 	p <- NULL
+ 	#construct indexes given frames | lmaomlmao remember freaking R indexes at 1
+ 	index_vector <- c(0)
+ 	curr <- 1
+ 	for (i in 1:(length(transcript))) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
+ 	#generate x axis
+ 	x_vector <- c()
+ 	for (x in 1:(length(index_vector) - 1)) {
+ 		x_vector <- c(x_vector, (index_vector[x + 1] - index_vector[x]))
+ 	}
+ 	#generate y axis
+ 	y_vector <- c()
+ 	for (y in 1:(length(index_vector) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
+ 	p <- barplot(y_vector, x_vector, space = 0)
+ }
> 
> exponential_dist <- function(
+ 	x = NULL,
+ 	lambda = NULL) {
+ 
+ 	ret <- lambda * exp(1)^(-lambda*x)
+ 	ret
+ }
> 
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.00001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.000001
+ 	}
+ 	lambda
+ }
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chop_df=chopped_up, transcript_number=4, length=10, variation=TRUE)
> plot_transcripts(dataf=transcripts, t=1, dist_type=0)
> 
> 
> 
> 
> 
> 
> plot_transcripts(dataf=transcripts, t=1, dist_type=1)
> plot_transcripts(dataf=transcripts, t=1, dist_type=1)
> plot_transcripts(dataf=transcripts, t=1, dist_type=0)
> plot_transcripts(dataf=transcripts, t=1, dist_type=1)
> plot_transcripts(dataf=transcripts, t=1, dist_type=0)
> dataf <- transcripts
> t <- 1
> # install.packages("ggplot2")
> # install.packages("gplots")
> # install.packages("Matrix")
> # library("Matrix")
> # library("ggplot2")
> # library("gplots")
> 
> generate_string <- function(
+ 	length = NULL) {
+ 
+ 	randomString <- c()
+ 	for (i in 1:length) {
+ 		appchar <- sample(c("A", "T", "C", "G"), 1, replace=FALSE)
+ 		randomString <- paste(randomString, appchar, sep = "")
+ 	}
+ 	randomString
+ }
> 
> #randomly cut up string
> #put into dataframe
> #random generate index number 1-cuts
> #piece back strings together
> create_cuts <- function(
+ 	operating_str = NULL,
+ 	filterby = NULL,
+ 	filter = FALSE,
+ 	cuts = NULL) {
+ 
+ 	if (is.null(cuts)) {
+ 		cuts <- 1000
+ 	}
+ 	if (is.null(operating_str)) {
+ 		operating_str <- generate_string(300000)
+ 	}
+ 	if (is.null(filterby)) {
+ 		filterby <- 100
+ 	}
+ 	i <- 1;
+ 	cuts_vector <- c()
+ 	while (operating_str != "" && i <= cuts) {
+ 		start <- as.integer(sample(0:i, 1) + 1)
+ 		end <- as.integer(sample((10:20) * start, 1))
+ 		cut <- substr(operating_str, start, end)
+ 		cuts_vector <- c(cuts_vector, cut)
+ 		operating_str <- gsub(cut, "", operating_str)
+ 		i <- i + 1
+ 	}
+ 	#filter 
+ 	if (filter) {
+ 		actual_cuts <- mapply(function(x) { if (nchar(x) >= filterby) return (TRUE) else return (FALSE) }, cuts_vector)
+ 		cuts_vector <- cuts_vector[actual_cuts == TRUE]
+ 	}
+ 	cuts_df <- data.frame(cuts = cuts_vector, stringsAsFactors = FALSE)
+ 	cuts_df
+ }
> 
> #return a dataframe of transcripts
> create_transcripts <- function(
+ 	chop_df = NULL,
+ 	transcript_number = NULL,
+ 	length = NULL,
+ 	variation = NULL) {
+ 
+ 	if (is.null(transcript_number)) {
+ 		transcript_number <- 4
+ 	}
+ 	if (is.null(length)) {
+ 		length <- 30
+ 	}
+ 	if (is.null(variation)) {
+ 		variation <- TRUE
+ 	}
+ 	end_sample <- nrow(chop_df)
+ 	transcripts <- c()
+ 	for (x in 1:transcript_number) {
+ 		individual_transcript <- c()
+ 		if (variation) {
+ 			start <- as.integer(length - sample(length/8:length, 1))
+ 			end <- as.integer(length + sample(length:length*1.2, 1))
+ 			length_loop <- sample(start:end, 1)
+ 			#print(length_loop)
+ 		} else {
+ 			length_loop <- length
+ 		}
+ 		if (length_loop > end_sample) {
+ 			length_loop <- end_sample
+ 		}
+ 		rand <- as.integer(sample((1:end_sample), size=length_loop, replace=FALSE))
+ 		for (i in rand) {
+ 			individual_transcript <- paste(individual_transcript, (chop_df[i,]), sep = "|")
+ 		}
+ 		individual_transcript <- paste(individual_transcript, "|", sep="")
+ 		transcripts <- c(transcripts, individual_transcript)
+ 	}
+ 	ret_df <- data.frame(transcripts = transcripts, stringsAsFactors = FALSE)
+ 	ret_df
+ }
> 
> #plot transcripts as a function of y = e^-x and 
> #use | as delminator
> #use nchar as count
> #assumptions 
> #truncated @ q3, make length fit at q3 to make a discernable difference
> 
> plot_transcripts <- function(
+ 	dataf = NULL,
+ 	trunca = NULL, 
+ 	lambda = NULL,
+ 	dist_type = NULL,
+ 	t = NULL) {
+ 
+ 	tol <- 1e-10
+ 
+ 	#this is to find the truncation point for non fitted distribution
+ 	if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
+ 	lambda <- find_lambda(x=trunca, tolerance=tol)
+ 
+ 	#iterate through all transcripts
+ 	current_length <- nchar(as.character(dataf[t,][[1]]))
+ 	transcript <- strsplit(as.character(dataf[t,][[1]]),"")
+ 	reads <- c()
+ 	read_str <- NULL
+ 	#parse string
+ 	for (base in transcript[[1]]) {
+ 		if (base != "|") {
+ 			read_str <- paste(read_str, base, sep="")
+ 		} else {
+ 			reads <- c(reads, read_str)
+ 			read_str <- NULL
+ 		}
+ 	}
+ 	if (dist_type == 0) {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=lambda)
+ 	} else {
+ 		plots(transcript=reads, distribution_type=distribution_type, lambda=find_lambda(x=current_length, tolerance=tol))
+ 	}	
+ }
> 
> plots <- function(
+ 	transcript = NULL,
+ 	distribution_type = NULL,
+ 	lambda = NULL) {
+ 
+ 	p <- NULL
+ 	#construct indexes given frames | lmaomlmao remember freaking R indexes at 1
+ 	index_vector <- c(0)
+ 	curr <- 1
+ 	for (i in 1:(length(transcript))) {
+ 		read <- transcript[i]
+ 		curr <- curr + nchar(read)
+ 		index_vector <- c(index_vector, curr)
+ 	}
+ 	#generate x axis
+ 	x_vector <- c()
+ 	for (x in 1:(length(index_vector) - 1)) {
+ 		x_vector <- c(x_vector, (index_vector[x + 1] - index_vector[x]))
+ 	}
+ 	#generate y axis
+ 	y_vector <- c()
+ 	for (y in 1:(length(index_vector) - 1)) {
+ 		input <- (index_vector[y + 1] + index_vector[y])/2
+ 		output <- exponential_dist(x=input, lambda=lambda)
+ 		y_vector <- c(y_vector, output)
+ 	}
+ 	p <- barplot(y_vector, x_vector, space = 0)
+ }
> 
> exponential_dist <- function(
+ 	x = NULL,
+ 	lambda = NULL) {
+ 
+ 	ret <- lambda * exp(1)^(-lambda*x)
+ 	ret
+ }
> 
> find_lambda <- function(
+ 	x = NULL, 
+ 	tolerance = NULL) {
+ 
+ 	lambda <- 0.00001
+ 	while ((lambda * exp(1)^(-lambda*x)) > tolerance) {
+ 		lambda <- lambda + 0.000001
+ 	}
+ 	lambda
+ }
> 
> opstr <- generate_string(1000)
> chopped_up <- create_cuts(operating_str=opstr, filterby=100, cuts=15)
> transcripts <- create_transcripts(chop_df=chopped_up, transcript_number=4, length=10, variation=TRUE)
> plot_transcripts(dataf=transcripts, t=1, dist_type=0)
> 
> 
> 
> 
> 
> 
> dataf <- transcripts
> dataf
transcripts
1                                                       |CAATCACGGCTAGATCAACAGTAAAATATCCGACATAGGCCCATTCGCAGATAGAAGATTCAATTCATGTTAAGTACC|AAGCTTGACATTGTCACCTGTCATCCGCAGCAGACTATTACTATGCCCATGAGCCCGCTAGCTGGTTGGTCCTTGTTCCTTCAAGCAAGGTCTGTCT|AGCCGGGCTCCTGACTTGGAGTAGCCACCTCTGTTCTTTA|AGCATGCTATCTGACCCTATTTCCCATGCGTTGTAGTGATCAAAAGGAAGGGAAATCTCCACACGACCAGAGCAATAGCACTTAACAAAGAGGGGAATCGGAGATTTCCTGCATTCTGCGGCCTGCCAACACGGCTTCTAAGATCAAGTGGGCCATATGCACAATAGCGAACTAAGGGGACC|CTCTAAAGTGACGCGTAAATACAGCTCTGTTGCTTTGCGACCGGCAACATACCGCAATGACGCCGACGTTCTTTTCACGGTTCCGACGAACAGGTATTTGAATCACTTATAAATAGTAGCATAAGGTTC|GCTGTGTCGCGGTGAGG|TTGGGCGGTGACTGGCAAACGGCAGAAGTCGTTAACCCTTCATCTGTTATGGCATCCGCTACTCTCTCT|ACTAGATTGTCATGGTC|TTTAGCTACGACGCCCGCTGAGTCAACTGCCACTGCGGTTGTATTCCTGGACCCT|CCGCAGCACGCAAATCGCGAGCTCCCATATA|ATAGTATACTTGATTCCTGCGCTTGTGAACCACCGTAACGTTCATAGTCCTATATCATGCGCCTCACGGATGTACTGACCCACATTCAAATTAGGGCGCGG|
2 |GCTGTGTCGCGGTGAGG|CTAAAAATCCCTGGAGGCCACGGGTGCACAA|CAATCACGGCTAGATCAACAGTAAAATATCCGACATAGGCCCATTCGCAGATAGAAGATTCAATTCATGTTAAGTACC|ACTAGATTGTCATGGTC|CTCTAAAGTGACGCGTAAATACAGCTCTGTTGCTTTGCGACCGGCAACATACCGCAATGACGCCGACGTTCTTTTCACGGTTCCGACGAACAGGTATTTGAATCACTTATAAATAGTAGCATAAGGTTC|CCGCAGCACGCAAATCGCGAGCTCCCATATA|AAGCTTGACATTGTCACCTGTCATCCGCAGCAGACTATTACTATGCCCATGAGCCCGCTAGCTGGTTGGTCCTTGTTCCTTCAAGCAAGGTCTGTCT||AGCCGGGCTCCTGACTTGGAGTAGCCACCTCTGTTCTTTA|CCCTATTCAGCCTCGAGGGCTTGCCTTGCGAGCCTAGGTAGGGTATCCAAGTGTAACTTGGGAGCACCTCAATGTTTATGACTACCCGTCTGAATTAGTGCATTTAATACGGGTACCCCGGTGTAGTTGCGGCAAACTGTG|ATAGTATACTTGATTCCTGCGCTTGTGAACCACCGTAACGTTCATAGTCCTATATCATGCGCCTCACGGATGTACTGACCCACATTCAAATTAGGGCGCGG|AGCATGCTATCTGACCCTATTTCCCATGCGTTGTAGTGATCAAAAGGAAGGGAAATCTCCACACGACCAGAGCAATAGCACTTAACAAAGAGGGGAATCGGAGATTTCCTGCATTCTGCGGCCTGCCAACACGGCTTCTAAGATCAAGTGGGCCATATGCACAATAGCGAACTAAGGGGACC|ATGG|
3                                                                                                                                                                 |ACTAGATTGTCATGGTC|GCTGTGTCGCGGTGAGG|TTTAGCTACGACGCCCGCTGAGTCAACTGCCACTGCGGTTGTATTCCTGGACCCT|CTAAAAATCCCTGGAGGCCACGGGTGCACAA|CTCTAAAGTGACGCGTAAATACAGCTCTGTTGCTTTGCGACCGGCAACATACCGCAATGACGCCGACGTTCTTTTCACGGTTCCGACGAACAGGTATTTGAATCACTTATAAATAGTAGCATAAGGTTC|AGCCGGGCTCCTGACTTGGAGTAGCCACCTCTGTTCTTTA|CAATCACGGCTAGATCAACAGTAAAATATCCGACATAGGCCCATTCGCAGATAGAAGATTCAATTCATGTTAAGTACC|ATAGTATACTTGATTCCTGCGCTTGTGAACCACCGTAACGTTCATAGTCCTATATCATGCGCCTCACGGATGTACTGACCCACATTCAAATTAGGGCGCGG|CCCTATTCAGCCTCGAGGGCTTGCCTTGCGAGCCTAGGTAGGGTATCCAAGTGTAACTTGGGAGCACCTCAATGTTTATGACTACCCGTCTGAATTAGTGCATTTAATACGGGTACCCCGGTGTAGTTGCGGCAAACTGTG|AAGCTTGACATTGTCACCTGTCATCCGCAGCAGACTATTACTATGCCCATGAGCCCGCTAGCTGGTTGGTCCTTGTTCCTTCAAGCAAGGTCTGTCT|ATGG|
4                                                                                                                                                                                                                                                                                                     |CTAAAAATCCCTGGAGGCCACGGGTGCACAA|CAATCACGGCTAGATCAACAGTAAAATATCCGACATAGGCCCATTCGCAGATAGAAGATTCAATTCATGTTAAGTACC|ATGG|TTGGGCGGTGACTGGCAAACGGCAGAAGTCGTTAACCCTTCATCTGTTATGGCATCCGCTACTCTCTCT|AAGCTTGACATTGTCACCTGTCATCCGCAGCAGACTATTACTATGCCCATGAGCCCGCTAGCTGGTTGGTCCTTGTTCCTTCAAGCAAGGTCTGTCT|CCCTATTCAGCCTCGAGGGCTTGCCTTGCGAGCCTAGGTAGGGTATCCAAGTGTAACTTGGGAGCACCTCAATGTTTATGACTACCCGTCTGAATTAGTGCATTTAATACGGGTACCCCGGTGTAGTTGCGGCAAACTGTG|CCGCAGCACGCAAATCGCGAGCTCCCATATA||CTCTAAAGTGACGCGTAAATACAGCTCTGTTGCTTTGCGACCGGCAACATACCGCAATGACGCCGACGTTCTTTTCACGGTTCCGACGAACAGGTATTTGAATCACTTATAAATAGTAGCATAAGGTTC|
> tol <- 1e-10
> 
> 	#this is to find the truncation point for non fitted distribution
> 	if (is.null(trunca)) {
+ 		maxl <- 0
+ 		for (it in 1:nrow(dataf)){
+ 			find_trunc <- as.character(dataf[it,][[1]])
+ 			if (maxl < nchar(find_trunc)) {
+ 				maxl <- nchar(find_trunc)
+ 			}
+ 		}
+ 		trunca <- maxl
+ 	}
> 	lambda <- find_lambda(x=trunca, tolerance=tol)
> 
> 	#iterate through all transcripts
> 	current_length <- nchar(as.character(dataf[t,][[1]]))
> 	transcript <- strsplit(as.character(dataf[t,][[1]]),"")
> 	reads <- c()
> 	read_str <- NULL
> 	#parse string
> 	for (base in transcript[[1]]) {
+ 		if (base != "|") {
+ 			read_str <- paste(read_str, base, sep="")
+ 		} else {
+ 			reads <- c(reads, read_str)
+ 			read_str <- NULL
+ 		}
+ 	}
> trunca
[1] 913
> lambda
[1] 0.020989
> current_length
[1] 828
> 